
mpu6050_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000424c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004544  08004544  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004544  08004544  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004544  08004544  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800454c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000070  080045bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080045bc  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000872a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001527  00000000  00000000  000287c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000898  00000000  00000000  00029cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  0002a588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013cc5  00000000  00000000  0002ad88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e24  00000000  00000000  0003ea4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006cdce  00000000  00000000  00045871  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b263f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027ec  00000000  00000000  000b26bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004344 	.word	0x08004344

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004344 	.word	0x08004344

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_fmul>:
 800099c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009a4:	bf1e      	ittt	ne
 80009a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009aa:	ea92 0f0c 	teqne	r2, ip
 80009ae:	ea93 0f0c 	teqne	r3, ip
 80009b2:	d06f      	beq.n	8000a94 <__aeabi_fmul+0xf8>
 80009b4:	441a      	add	r2, r3
 80009b6:	ea80 0c01 	eor.w	ip, r0, r1
 80009ba:	0240      	lsls	r0, r0, #9
 80009bc:	bf18      	it	ne
 80009be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009c2:	d01e      	beq.n	8000a02 <__aeabi_fmul+0x66>
 80009c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009d0:	fba0 3101 	umull	r3, r1, r0, r1
 80009d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009dc:	bf3e      	ittt	cc
 80009de:	0049      	lslcc	r1, r1, #1
 80009e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009e4:	005b      	lslcc	r3, r3, #1
 80009e6:	ea40 0001 	orr.w	r0, r0, r1
 80009ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009ee:	2afd      	cmp	r2, #253	; 0xfd
 80009f0:	d81d      	bhi.n	8000a2e <__aeabi_fmul+0x92>
 80009f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009fa:	bf08      	it	eq
 80009fc:	f020 0001 	biceq.w	r0, r0, #1
 8000a00:	4770      	bx	lr
 8000a02:	f090 0f00 	teq	r0, #0
 8000a06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a0a:	bf08      	it	eq
 8000a0c:	0249      	lsleq	r1, r1, #9
 8000a0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a16:	3a7f      	subs	r2, #127	; 0x7f
 8000a18:	bfc2      	ittt	gt
 8000a1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a22:	4770      	bxgt	lr
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	f04f 0300 	mov.w	r3, #0
 8000a2c:	3a01      	subs	r2, #1
 8000a2e:	dc5d      	bgt.n	8000aec <__aeabi_fmul+0x150>
 8000a30:	f112 0f19 	cmn.w	r2, #25
 8000a34:	bfdc      	itt	le
 8000a36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a3a:	4770      	bxle	lr
 8000a3c:	f1c2 0200 	rsb	r2, r2, #0
 8000a40:	0041      	lsls	r1, r0, #1
 8000a42:	fa21 f102 	lsr.w	r1, r1, r2
 8000a46:	f1c2 0220 	rsb	r2, r2, #32
 8000a4a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a4e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a52:	f140 0000 	adc.w	r0, r0, #0
 8000a56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a5a:	bf08      	it	eq
 8000a5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a60:	4770      	bx	lr
 8000a62:	f092 0f00 	teq	r2, #0
 8000a66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6a:	bf02      	ittt	eq
 8000a6c:	0040      	lsleq	r0, r0, #1
 8000a6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a72:	3a01      	subeq	r2, #1
 8000a74:	d0f9      	beq.n	8000a6a <__aeabi_fmul+0xce>
 8000a76:	ea40 000c 	orr.w	r0, r0, ip
 8000a7a:	f093 0f00 	teq	r3, #0
 8000a7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a82:	bf02      	ittt	eq
 8000a84:	0049      	lsleq	r1, r1, #1
 8000a86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8a:	3b01      	subeq	r3, #1
 8000a8c:	d0f9      	beq.n	8000a82 <__aeabi_fmul+0xe6>
 8000a8e:	ea41 010c 	orr.w	r1, r1, ip
 8000a92:	e78f      	b.n	80009b4 <__aeabi_fmul+0x18>
 8000a94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a98:	ea92 0f0c 	teq	r2, ip
 8000a9c:	bf18      	it	ne
 8000a9e:	ea93 0f0c 	teqne	r3, ip
 8000aa2:	d00a      	beq.n	8000aba <__aeabi_fmul+0x11e>
 8000aa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000aa8:	bf18      	it	ne
 8000aaa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aae:	d1d8      	bne.n	8000a62 <__aeabi_fmul+0xc6>
 8000ab0:	ea80 0001 	eor.w	r0, r0, r1
 8000ab4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f090 0f00 	teq	r0, #0
 8000abe:	bf17      	itett	ne
 8000ac0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ac4:	4608      	moveq	r0, r1
 8000ac6:	f091 0f00 	teqne	r1, #0
 8000aca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ace:	d014      	beq.n	8000afa <__aeabi_fmul+0x15e>
 8000ad0:	ea92 0f0c 	teq	r2, ip
 8000ad4:	d101      	bne.n	8000ada <__aeabi_fmul+0x13e>
 8000ad6:	0242      	lsls	r2, r0, #9
 8000ad8:	d10f      	bne.n	8000afa <__aeabi_fmul+0x15e>
 8000ada:	ea93 0f0c 	teq	r3, ip
 8000ade:	d103      	bne.n	8000ae8 <__aeabi_fmul+0x14c>
 8000ae0:	024b      	lsls	r3, r1, #9
 8000ae2:	bf18      	it	ne
 8000ae4:	4608      	movne	r0, r1
 8000ae6:	d108      	bne.n	8000afa <__aeabi_fmul+0x15e>
 8000ae8:	ea80 0001 	eor.w	r0, r0, r1
 8000aec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_fdiv>:
 8000b04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b12:	ea92 0f0c 	teqne	r2, ip
 8000b16:	ea93 0f0c 	teqne	r3, ip
 8000b1a:	d069      	beq.n	8000bf0 <__aeabi_fdiv+0xec>
 8000b1c:	eba2 0203 	sub.w	r2, r2, r3
 8000b20:	ea80 0c01 	eor.w	ip, r0, r1
 8000b24:	0249      	lsls	r1, r1, #9
 8000b26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b2a:	d037      	beq.n	8000b9c <__aeabi_fdiv+0x98>
 8000b2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	bf38      	it	cc
 8000b40:	005b      	lslcc	r3, r3, #1
 8000b42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	bf24      	itt	cs
 8000b4e:	1a5b      	subcs	r3, r3, r1
 8000b50:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b58:	bf24      	itt	cs
 8000b5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b66:	bf24      	itt	cs
 8000b68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b74:	bf24      	itt	cs
 8000b76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	bf18      	it	ne
 8000b82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b86:	d1e0      	bne.n	8000b4a <__aeabi_fdiv+0x46>
 8000b88:	2afd      	cmp	r2, #253	; 0xfd
 8000b8a:	f63f af50 	bhi.w	8000a2e <__aeabi_fmul+0x92>
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ba0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ba4:	327f      	adds	r2, #127	; 0x7f
 8000ba6:	bfc2      	ittt	gt
 8000ba8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bb0:	4770      	bxgt	lr
 8000bb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb6:	f04f 0300 	mov.w	r3, #0
 8000bba:	3a01      	subs	r2, #1
 8000bbc:	e737      	b.n	8000a2e <__aeabi_fmul+0x92>
 8000bbe:	f092 0f00 	teq	r2, #0
 8000bc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bc6:	bf02      	ittt	eq
 8000bc8:	0040      	lsleq	r0, r0, #1
 8000bca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bce:	3a01      	subeq	r2, #1
 8000bd0:	d0f9      	beq.n	8000bc6 <__aeabi_fdiv+0xc2>
 8000bd2:	ea40 000c 	orr.w	r0, r0, ip
 8000bd6:	f093 0f00 	teq	r3, #0
 8000bda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bde:	bf02      	ittt	eq
 8000be0:	0049      	lsleq	r1, r1, #1
 8000be2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000be6:	3b01      	subeq	r3, #1
 8000be8:	d0f9      	beq.n	8000bde <__aeabi_fdiv+0xda>
 8000bea:	ea41 010c 	orr.w	r1, r1, ip
 8000bee:	e795      	b.n	8000b1c <__aeabi_fdiv+0x18>
 8000bf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bf4:	ea92 0f0c 	teq	r2, ip
 8000bf8:	d108      	bne.n	8000c0c <__aeabi_fdiv+0x108>
 8000bfa:	0242      	lsls	r2, r0, #9
 8000bfc:	f47f af7d 	bne.w	8000afa <__aeabi_fmul+0x15e>
 8000c00:	ea93 0f0c 	teq	r3, ip
 8000c04:	f47f af70 	bne.w	8000ae8 <__aeabi_fmul+0x14c>
 8000c08:	4608      	mov	r0, r1
 8000c0a:	e776      	b.n	8000afa <__aeabi_fmul+0x15e>
 8000c0c:	ea93 0f0c 	teq	r3, ip
 8000c10:	d104      	bne.n	8000c1c <__aeabi_fdiv+0x118>
 8000c12:	024b      	lsls	r3, r1, #9
 8000c14:	f43f af4c 	beq.w	8000ab0 <__aeabi_fmul+0x114>
 8000c18:	4608      	mov	r0, r1
 8000c1a:	e76e      	b.n	8000afa <__aeabi_fmul+0x15e>
 8000c1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c20:	bf18      	it	ne
 8000c22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c26:	d1ca      	bne.n	8000bbe <__aeabi_fdiv+0xba>
 8000c28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c2c:	f47f af5c 	bne.w	8000ae8 <__aeabi_fmul+0x14c>
 8000c30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	f47f af3c 	bne.w	8000ab0 <__aeabi_fmul+0x114>
 8000c38:	e75f      	b.n	8000afa <__aeabi_fmul+0x15e>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_f2uiz>:
 8000c3c:	0042      	lsls	r2, r0, #1
 8000c3e:	d20e      	bcs.n	8000c5e <__aeabi_f2uiz+0x22>
 8000c40:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c44:	d30b      	bcc.n	8000c5e <__aeabi_f2uiz+0x22>
 8000c46:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c4a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c4e:	d409      	bmi.n	8000c64 <__aeabi_f2uiz+0x28>
 8000c50:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c58:	fa23 f002 	lsr.w	r0, r3, r2
 8000c5c:	4770      	bx	lr
 8000c5e:	f04f 0000 	mov.w	r0, #0
 8000c62:	4770      	bx	lr
 8000c64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c68:	d101      	bne.n	8000c6e <__aeabi_f2uiz+0x32>
 8000c6a:	0242      	lsls	r2, r0, #9
 8000c6c:	d102      	bne.n	8000c74 <__aeabi_f2uiz+0x38>
 8000c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c72:	4770      	bx	lr
 8000c74:	f04f 0000 	mov.w	r0, #0
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c82:	f000 fea5 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c86:	f000 f961 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8a:	f000 f9fd 	bl	8001088 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c8e:	f000 f9a3 	bl	8000fd8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c92:	f000 f9cf 	bl	8001034 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU_Init();
 8000c96:	f000 fa25 	bl	80010e4 <MPU_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_Accel();
 8000c9a:	f000 fbbf 	bl	800141c <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8000c9e:	f000 fc5f 	bl	8001560 <MPU6050_Read_Gyro>

	  Ax *= 100;
 8000ca2:	4b9b      	ldr	r3, [pc, #620]	; (8000f10 <main+0x294>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	499b      	ldr	r1, [pc, #620]	; (8000f14 <main+0x298>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fe77 	bl	800099c <__aeabi_fmul>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b97      	ldr	r3, [pc, #604]	; (8000f10 <main+0x294>)
 8000cb4:	601a      	str	r2, [r3, #0]
	  sprintf((char*)buf, "Ax= %u.%02u g\r\n", (unsigned int)Ax/100,(unsigned int)Ax%100);
 8000cb6:	4b96      	ldr	r3, [pc, #600]	; (8000f10 <main+0x294>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ffbe 	bl	8000c3c <__aeabi_f2uiz>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	4b95      	ldr	r3, [pc, #596]	; (8000f18 <main+0x29c>)
 8000cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8000cc8:	095c      	lsrs	r4, r3, #5
 8000cca:	4b91      	ldr	r3, [pc, #580]	; (8000f10 <main+0x294>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ffb4 	bl	8000c3c <__aeabi_f2uiz>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4b90      	ldr	r3, [pc, #576]	; (8000f18 <main+0x29c>)
 8000cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8000cdc:	095b      	lsrs	r3, r3, #5
 8000cde:	2164      	movs	r1, #100	; 0x64
 8000ce0:	fb01 f303 	mul.w	r3, r1, r3
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	1d38      	adds	r0, r7, #4
 8000ce8:	4622      	mov	r2, r4
 8000cea:	498c      	ldr	r1, [pc, #560]	; (8000f1c <main+0x2a0>)
 8000cec:	f002 ff18 	bl	8003b20 <siprintf>
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fa2c 	bl	8000150 <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	1d39      	adds	r1, r7, #4
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	4887      	ldr	r0, [pc, #540]	; (8000f20 <main+0x2a4>)
 8000d04:	f002 fd1d 	bl	8003742 <HAL_UART_Transmit>

	  Ay *= 100;
 8000d08:	4b86      	ldr	r3, [pc, #536]	; (8000f24 <main+0x2a8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4981      	ldr	r1, [pc, #516]	; (8000f14 <main+0x298>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fe44 	bl	800099c <__aeabi_fmul>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b82      	ldr	r3, [pc, #520]	; (8000f24 <main+0x2a8>)
 8000d1a:	601a      	str	r2, [r3, #0]
	  sprintf((char*)buf, "Ay= %u.%02u g\r\n", (unsigned int)Ay/100,(unsigned int)Ay%100);
 8000d1c:	4b81      	ldr	r3, [pc, #516]	; (8000f24 <main+0x2a8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff8b 	bl	8000c3c <__aeabi_f2uiz>
 8000d26:	4602      	mov	r2, r0
 8000d28:	4b7b      	ldr	r3, [pc, #492]	; (8000f18 <main+0x29c>)
 8000d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8000d2e:	095c      	lsrs	r4, r3, #5
 8000d30:	4b7c      	ldr	r3, [pc, #496]	; (8000f24 <main+0x2a8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff81 	bl	8000c3c <__aeabi_f2uiz>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	4b76      	ldr	r3, [pc, #472]	; (8000f18 <main+0x29c>)
 8000d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2164      	movs	r1, #100	; 0x64
 8000d46:	fb01 f303 	mul.w	r3, r1, r3
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	1d38      	adds	r0, r7, #4
 8000d4e:	4622      	mov	r2, r4
 8000d50:	4975      	ldr	r1, [pc, #468]	; (8000f28 <main+0x2ac>)
 8000d52:	f002 fee5 	bl	8003b20 <siprintf>
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff f9f9 	bl	8000150 <strlen>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	1d39      	adds	r1, r7, #4
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	486d      	ldr	r0, [pc, #436]	; (8000f20 <main+0x2a4>)
 8000d6a:	f002 fcea 	bl	8003742 <HAL_UART_Transmit>

	  Az *= 100;
 8000d6e:	4b6f      	ldr	r3, [pc, #444]	; (8000f2c <main+0x2b0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4968      	ldr	r1, [pc, #416]	; (8000f14 <main+0x298>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fe11 	bl	800099c <__aeabi_fmul>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b6b      	ldr	r3, [pc, #428]	; (8000f2c <main+0x2b0>)
 8000d80:	601a      	str	r2, [r3, #0]
	  sprintf((char*)buf, "Az= %u.%02u g\r\n", (unsigned int)Az/100,(unsigned int)Az%100);
 8000d82:	4b6a      	ldr	r3, [pc, #424]	; (8000f2c <main+0x2b0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff58 	bl	8000c3c <__aeabi_f2uiz>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	4b62      	ldr	r3, [pc, #392]	; (8000f18 <main+0x29c>)
 8000d90:	fba3 2302 	umull	r2, r3, r3, r2
 8000d94:	095c      	lsrs	r4, r3, #5
 8000d96:	4b65      	ldr	r3, [pc, #404]	; (8000f2c <main+0x2b0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff4e 	bl	8000c3c <__aeabi_f2uiz>
 8000da0:	4602      	mov	r2, r0
 8000da2:	4b5d      	ldr	r3, [pc, #372]	; (8000f18 <main+0x29c>)
 8000da4:	fba3 1302 	umull	r1, r3, r3, r2
 8000da8:	095b      	lsrs	r3, r3, #5
 8000daa:	2164      	movs	r1, #100	; 0x64
 8000dac:	fb01 f303 	mul.w	r3, r1, r3
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	1d38      	adds	r0, r7, #4
 8000db4:	4622      	mov	r2, r4
 8000db6:	495e      	ldr	r1, [pc, #376]	; (8000f30 <main+0x2b4>)
 8000db8:	f002 feb2 	bl	8003b20 <siprintf>
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff f9c6 	bl	8000150 <strlen>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	1d39      	adds	r1, r7, #4
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	4854      	ldr	r0, [pc, #336]	; (8000f20 <main+0x2a4>)
 8000dd0:	f002 fcb7 	bl	8003742 <HAL_UART_Transmit>

	  Gx *= 100;
 8000dd4:	4b57      	ldr	r3, [pc, #348]	; (8000f34 <main+0x2b8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	494e      	ldr	r1, [pc, #312]	; (8000f14 <main+0x298>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fdde 	bl	800099c <__aeabi_fmul>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b53      	ldr	r3, [pc, #332]	; (8000f34 <main+0x2b8>)
 8000de6:	601a      	str	r2, [r3, #0]
	  sprintf((char*)buf, "Gx= %u.%02u deg/s\r\n", (unsigned int)Gx/100,(unsigned int)Gx%100);
 8000de8:	4b52      	ldr	r3, [pc, #328]	; (8000f34 <main+0x2b8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff25 	bl	8000c3c <__aeabi_f2uiz>
 8000df2:	4602      	mov	r2, r0
 8000df4:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <main+0x29c>)
 8000df6:	fba3 2302 	umull	r2, r3, r3, r2
 8000dfa:	095c      	lsrs	r4, r3, #5
 8000dfc:	4b4d      	ldr	r3, [pc, #308]	; (8000f34 <main+0x2b8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff1b 	bl	8000c3c <__aeabi_f2uiz>
 8000e06:	4602      	mov	r2, r0
 8000e08:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <main+0x29c>)
 8000e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2164      	movs	r1, #100	; 0x64
 8000e12:	fb01 f303 	mul.w	r3, r1, r3
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	1d38      	adds	r0, r7, #4
 8000e1a:	4622      	mov	r2, r4
 8000e1c:	4946      	ldr	r1, [pc, #280]	; (8000f38 <main+0x2bc>)
 8000e1e:	f002 fe7f 	bl	8003b20 <siprintf>
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff f993 	bl	8000150 <strlen>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	1d39      	adds	r1, r7, #4
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	483a      	ldr	r0, [pc, #232]	; (8000f20 <main+0x2a4>)
 8000e36:	f002 fc84 	bl	8003742 <HAL_UART_Transmit>

	  Gy *= 100;
 8000e3a:	4b40      	ldr	r3, [pc, #256]	; (8000f3c <main+0x2c0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4935      	ldr	r1, [pc, #212]	; (8000f14 <main+0x298>)
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fdab 	bl	800099c <__aeabi_fmul>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b3c      	ldr	r3, [pc, #240]	; (8000f3c <main+0x2c0>)
 8000e4c:	601a      	str	r2, [r3, #0]
	  sprintf((char*)buf, "Gy= %u.%02u deg/s\r\n", (unsigned int)Gy/100,(unsigned int)Gy%100);
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	; (8000f3c <main+0x2c0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fef2 	bl	8000c3c <__aeabi_f2uiz>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <main+0x29c>)
 8000e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8000e60:	095c      	lsrs	r4, r3, #5
 8000e62:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <main+0x2c0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fee8 	bl	8000c3c <__aeabi_f2uiz>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <main+0x29c>)
 8000e70:	fba3 1302 	umull	r1, r3, r3, r2
 8000e74:	095b      	lsrs	r3, r3, #5
 8000e76:	2164      	movs	r1, #100	; 0x64
 8000e78:	fb01 f303 	mul.w	r3, r1, r3
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	1d38      	adds	r0, r7, #4
 8000e80:	4622      	mov	r2, r4
 8000e82:	492f      	ldr	r1, [pc, #188]	; (8000f40 <main+0x2c4>)
 8000e84:	f002 fe4c 	bl	8003b20 <siprintf>
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff f960 	bl	8000150 <strlen>
 8000e90:	4603      	mov	r3, r0
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	1d39      	adds	r1, r7, #4
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	4821      	ldr	r0, [pc, #132]	; (8000f20 <main+0x2a4>)
 8000e9c:	f002 fc51 	bl	8003742 <HAL_UART_Transmit>

	  Gz *= 100;
 8000ea0:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <main+0x2c8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	491b      	ldr	r1, [pc, #108]	; (8000f14 <main+0x298>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fd78 	bl	800099c <__aeabi_fmul>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <main+0x2c8>)
 8000eb2:	601a      	str	r2, [r3, #0]
	  sprintf((char*)buf, "Gz= %u.%02u deg/s\r\n", (unsigned int)Gz/100,(unsigned int)Gz%100);
 8000eb4:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <main+0x2c8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff febf 	bl	8000c3c <__aeabi_f2uiz>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <main+0x29c>)
 8000ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8000ec6:	095c      	lsrs	r4, r3, #5
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <main+0x2c8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff feb5 	bl	8000c3c <__aeabi_f2uiz>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <main+0x29c>)
 8000ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2164      	movs	r1, #100	; 0x64
 8000ede:	fb01 f303 	mul.w	r3, r1, r3
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	1d38      	adds	r0, r7, #4
 8000ee6:	4622      	mov	r2, r4
 8000ee8:	4917      	ldr	r1, [pc, #92]	; (8000f48 <main+0x2cc>)
 8000eea:	f002 fe19 	bl	8003b20 <siprintf>
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff f92d 	bl	8000150 <strlen>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	1d39      	adds	r1, r7, #4
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <main+0x2a4>)
 8000f02:	f002 fc1e 	bl	8003742 <HAL_UART_Transmit>

	  HAL_Delay(300);
 8000f06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f0a:	f000 fdc3 	bl	8001a94 <HAL_Delay>
	  MPU6050_Read_Accel();
 8000f0e:	e6c4      	b.n	8000c9a <main+0x1e>
 8000f10:	20000144 	.word	0x20000144
 8000f14:	42c80000 	.word	0x42c80000
 8000f18:	51eb851f 	.word	0x51eb851f
 8000f1c:	0800435c 	.word	0x0800435c
 8000f20:	20000104 	.word	0x20000104
 8000f24:	200000fc 	.word	0x200000fc
 8000f28:	0800436c 	.word	0x0800436c
 8000f2c:	20000148 	.word	0x20000148
 8000f30:	0800437c 	.word	0x0800437c
 8000f34:	200000a4 	.word	0x200000a4
 8000f38:	0800438c 	.word	0x0800438c
 8000f3c:	20000100 	.word	0x20000100
 8000f40:	080043a0 	.word	0x080043a0
 8000f44:	2000014c 	.word	0x2000014c
 8000f48:	080043b4 	.word	0x080043b4

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b090      	sub	sp, #64	; 0x40
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0318 	add.w	r3, r7, #24
 8000f56:	2228      	movs	r2, #40	; 0x28
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fdd8 	bl	8003b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f80:	2302      	movs	r3, #2
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f8a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 ff6b 	bl	8002e70 <HAL_RCC_OscConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fa0:	f000 fb84 	bl	80016ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 f9d6 	bl	8003370 <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fca:	f000 fb6f 	bl	80016ac <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3740      	adds	r7, #64	; 0x40
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_I2C1_Init+0x50>)
 8000fde:	4a13      	ldr	r2, [pc, #76]	; (800102c <MX_I2C1_Init+0x54>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_I2C1_Init+0x50>)
 8000fe4:	4a12      	ldr	r2, [pc, #72]	; (8001030 <MX_I2C1_Init+0x58>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_I2C1_Init+0x50>)
 8000ff6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ffa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_I2C1_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_I2C1_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_I2C1_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_I2C1_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_I2C1_Init+0x50>)
 8001016:	f000 ff9d 	bl	8001f54 <HAL_I2C_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001020:	f000 fb44 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200000a8 	.word	0x200000a8
 800102c:	40005400 	.word	0x40005400
 8001030:	000186a0 	.word	0x000186a0

08001034 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 800103a:	4a12      	ldr	r2, [pc, #72]	; (8001084 <MX_USART1_UART_Init+0x50>)
 800103c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 8001040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001044:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 800106c:	f002 fb1c 	bl	80036a8 <HAL_UART_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001076:	f000 fb19 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000104 	.word	0x20000104
 8001084:	40013800 	.word	0x40013800

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_GPIO_Init+0x58>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_GPIO_Init+0x58>)
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	6193      	str	r3, [r2, #24]
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_GPIO_Init+0x58>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_GPIO_Init+0x58>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <MX_GPIO_Init+0x58>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_GPIO_Init+0x58>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_GPIO_Init+0x58>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <MX_GPIO_Init+0x58>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <MX_GPIO_Init+0x58>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000

080010e4 <MPU_Init>:

/* USER CODE BEGIN 4 */

void MPU_Init(void)
{
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b08e      	sub	sp, #56	; 0x38
 80010e8:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef retStatus;
	uint8_t bufSerial[30];
	uint8_t bufData = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	71fb      	strb	r3, [r7, #7]
	/* check if the sensor is responding */
	retStatus = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &bufData, 1, HAL_MAX_DELAY);
 80010ee:	23d0      	movs	r3, #208	; 0xd0
 80010f0:	b299      	uxth	r1, r3
 80010f2:	2375      	movs	r3, #117	; 0x75
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	48b9      	ldr	r0, [pc, #740]	; (80013ec <MPU_Init+0x308>)
 8001108:	f001 f946 	bl	8002398 <HAL_I2C_Mem_Read>
 800110c:	4603      	mov	r3, r0
 800110e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(bufData == 104) //0x68 - default value
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b68      	cmp	r3, #104	; 0x68
 8001116:	f040 814a 	bne.w	80013ae <MPU_Init+0x2ca>
	{
		strcpy((char*)bufSerial,"WHO_AM_I_REG OK\r\n");
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4ab4      	ldr	r2, [pc, #720]	; (80013f0 <MPU_Init+0x30c>)
 8001120:	461c      	mov	r4, r3
 8001122:	4615      	mov	r5, r2
 8001124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001128:	682b      	ldr	r3, [r5, #0]
 800112a:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f80d 	bl	8000150 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	f107 0108 	add.w	r1, r7, #8
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	48ac      	ldr	r0, [pc, #688]	; (80013f4 <MPU_Init+0x310>)
 8001144:	f002 fafd 	bl	8003742 <HAL_UART_Transmit>

		/* POWER MANAGEMENT: all 0's to wake the sensor up */
		bufData = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	71fb      	strb	r3, [r7, #7]
		retStatus = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&bufData, 1, HAL_MAX_DELAY);
 800114c:	23d0      	movs	r3, #208	; 0xd0
 800114e:	b299      	uxth	r1, r3
 8001150:	236b      	movs	r3, #107	; 0x6b
 8001152:	b29a      	uxth	r2, r3
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2301      	movs	r3, #1
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2301      	movs	r3, #1
 8001164:	48a1      	ldr	r0, [pc, #644]	; (80013ec <MPU_Init+0x308>)
 8001166:	f001 f81d 	bl	80021a4 <HAL_I2C_Mem_Write>
 800116a:	4603      	mov	r3, r0
 800116c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(retStatus == HAL_OK)
 8001170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001174:	2b00      	cmp	r3, #0
 8001176:	d117      	bne.n	80011a8 <MPU_Init+0xc4>
		{
			strcpy((char*)bufSerial,"PWR_MGMT_1_REG OK\r\n");
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	4a9e      	ldr	r2, [pc, #632]	; (80013f8 <MPU_Init+0x314>)
 800117e:	461c      	mov	r4, r3
 8001180:	4615      	mov	r5, r2
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001186:	682b      	ldr	r3, [r5, #0]
 8001188:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	4618      	mov	r0, r3
 8001190:	f7fe ffde 	bl	8000150 <strlen>
 8001194:	4603      	mov	r3, r0
 8001196:	b29a      	uxth	r2, r3
 8001198:	f107 0108 	add.w	r1, r7, #8
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	4894      	ldr	r0, [pc, #592]	; (80013f4 <MPU_Init+0x310>)
 80011a2:	f002 face 	bl	8003742 <HAL_UART_Transmit>
 80011a6:	e01c      	b.n	80011e2 <MPU_Init+0xfe>
		} else {
			strcpy((char*)bufSerial,"PWR_MGMT_1_REG ERROR\r\n");
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4a93      	ldr	r2, [pc, #588]	; (80013fc <MPU_Init+0x318>)
 80011ae:	461c      	mov	r4, r3
 80011b0:	4615      	mov	r5, r2
 80011b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011ba:	6020      	str	r0, [r4, #0]
 80011bc:	3404      	adds	r4, #4
 80011be:	8021      	strh	r1, [r4, #0]
 80011c0:	3402      	adds	r4, #2
 80011c2:	0c0b      	lsrs	r3, r1, #16
 80011c4:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7fe ffc0 	bl	8000150 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	f107 0108 	add.w	r1, r7, #8
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	4885      	ldr	r0, [pc, #532]	; (80013f4 <MPU_Init+0x310>)
 80011de:	f002 fab0 	bl	8003742 <HAL_UART_Transmit>
		}

		/* SAMPLE RATE = Gyroscope Output Rate / (1 + SMPLRT_DIV) // Gyroscope Output Rate = 8kHz */
		bufData = 0x07;
 80011e2:	2307      	movs	r3, #7
 80011e4:	71fb      	strb	r3, [r7, #7]
		retStatus = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &bufData, 1, HAL_MAX_DELAY);
 80011e6:	23d0      	movs	r3, #208	; 0xd0
 80011e8:	b299      	uxth	r1, r3
 80011ea:	2319      	movs	r3, #25
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	1dfb      	adds	r3, r7, #7
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	487b      	ldr	r0, [pc, #492]	; (80013ec <MPU_Init+0x308>)
 8001200:	f000 ffd0 	bl	80021a4 <HAL_I2C_Mem_Write>
 8001204:	4603      	mov	r3, r0
 8001206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(retStatus == HAL_OK)
 800120a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800120e:	2b00      	cmp	r3, #0
 8001210:	d117      	bne.n	8001242 <MPU_Init+0x15e>
		{
			strcpy((char*)bufSerial,"SMPLRT_DIV_REG OK\r\n");
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4a7a      	ldr	r2, [pc, #488]	; (8001400 <MPU_Init+0x31c>)
 8001218:	461c      	mov	r4, r3
 800121a:	4615      	mov	r5, r2
 800121c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001220:	682b      	ldr	r3, [r5, #0]
 8001222:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	4618      	mov	r0, r3
 800122a:	f7fe ff91 	bl	8000150 <strlen>
 800122e:	4603      	mov	r3, r0
 8001230:	b29a      	uxth	r2, r3
 8001232:	f107 0108 	add.w	r1, r7, #8
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	486e      	ldr	r0, [pc, #440]	; (80013f4 <MPU_Init+0x310>)
 800123c:	f002 fa81 	bl	8003742 <HAL_UART_Transmit>
 8001240:	e01c      	b.n	800127c <MPU_Init+0x198>
		} else {
			strcpy((char*)bufSerial,"SMPLRT_DIV_REG ERROR\r\n");
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	4a6f      	ldr	r2, [pc, #444]	; (8001404 <MPU_Init+0x320>)
 8001248:	461c      	mov	r4, r3
 800124a:	4615      	mov	r5, r2
 800124c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001250:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001254:	6020      	str	r0, [r4, #0]
 8001256:	3404      	adds	r4, #4
 8001258:	8021      	strh	r1, [r4, #0]
 800125a:	3402      	adds	r4, #2
 800125c:	0c0b      	lsrs	r3, r1, #16
 800125e:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	4618      	mov	r0, r3
 8001266:	f7fe ff73 	bl	8000150 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	b29a      	uxth	r2, r3
 800126e:	f107 0108 	add.w	r1, r7, #8
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	485f      	ldr	r0, [pc, #380]	; (80013f4 <MPU_Init+0x310>)
 8001278:	f002 fa63 	bl	8003742 <HAL_UART_Transmit>
		}

		/* GYROSCOPE CONFIGURATION: full scale range (250 to 2000 degree/sec) */
		bufData = 0x00;
 800127c:	2300      	movs	r3, #0
 800127e:	71fb      	strb	r3, [r7, #7]
		retStatus = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &bufData, 1, HAL_MAX_DELAY);
 8001280:	23d0      	movs	r3, #208	; 0xd0
 8001282:	b299      	uxth	r1, r3
 8001284:	231b      	movs	r3, #27
 8001286:	b29a      	uxth	r2, r3
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	2301      	movs	r3, #1
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	4854      	ldr	r0, [pc, #336]	; (80013ec <MPU_Init+0x308>)
 800129a:	f000 ff83 	bl	80021a4 <HAL_I2C_Mem_Write>
 800129e:	4603      	mov	r3, r0
 80012a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(retStatus == HAL_OK)
 80012a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d11a      	bne.n	80012e2 <MPU_Init+0x1fe>
		{
			strcpy((char*)bufSerial,"GYRO_CONFIG_REG OK\r\n");
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	4a55      	ldr	r2, [pc, #340]	; (8001408 <MPU_Init+0x324>)
 80012b2:	461c      	mov	r4, r3
 80012b4:	4615      	mov	r5, r2
 80012b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012be:	6020      	str	r0, [r4, #0]
 80012c0:	3404      	adds	r4, #4
 80012c2:	7021      	strb	r1, [r4, #0]
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7fe ff41 	bl	8000150 <strlen>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	f107 0108 	add.w	r1, r7, #8
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	4846      	ldr	r0, [pc, #280]	; (80013f4 <MPU_Init+0x310>)
 80012dc:	f002 fa31 	bl	8003742 <HAL_UART_Transmit>
 80012e0:	e018      	b.n	8001314 <MPU_Init+0x230>
		} else {
			strcpy((char*)bufSerial,"GYRO_CONFIG_REG ERROR\r\n");
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4a49      	ldr	r2, [pc, #292]	; (800140c <MPU_Init+0x328>)
 80012e8:	461c      	mov	r4, r3
 80012ea:	4615      	mov	r5, r2
 80012ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012f4:	e884 0003 	stmia.w	r4, {r0, r1}
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7fe ff27 	bl	8000150 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	b29a      	uxth	r2, r3
 8001306:	f107 0108 	add.w	r1, r7, #8
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	4839      	ldr	r0, [pc, #228]	; (80013f4 <MPU_Init+0x310>)
 8001310:	f002 fa17 	bl	8003742 <HAL_UART_Transmit>
		}

		/* ACCELEROMETER CONFIGURATION: full scale range (2 to 16 g) */
		bufData = 0x00;
 8001314:	2300      	movs	r3, #0
 8001316:	71fb      	strb	r3, [r7, #7]
		retStatus = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &bufData, 1, HAL_MAX_DELAY);
 8001318:	23d0      	movs	r3, #208	; 0xd0
 800131a:	b299      	uxth	r1, r3
 800131c:	231c      	movs	r3, #28
 800131e:	b29a      	uxth	r2, r3
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	2301      	movs	r3, #1
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2301      	movs	r3, #1
 8001330:	482e      	ldr	r0, [pc, #184]	; (80013ec <MPU_Init+0x308>)
 8001332:	f000 ff37 	bl	80021a4 <HAL_I2C_Mem_Write>
 8001336:	4603      	mov	r3, r0
 8001338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(retStatus == HAL_OK)
 800133c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001340:	2b00      	cmp	r3, #0
 8001342:	d11a      	bne.n	800137a <MPU_Init+0x296>
		{
			strcpy((char*)bufSerial,"ACCEL_CONFIG_REG OK\r\n");
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4a31      	ldr	r2, [pc, #196]	; (8001410 <MPU_Init+0x32c>)
 800134a:	461c      	mov	r4, r3
 800134c:	4615      	mov	r5, r2
 800134e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001352:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001356:	6020      	str	r0, [r4, #0]
 8001358:	3404      	adds	r4, #4
 800135a:	8021      	strh	r1, [r4, #0]
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f7fe fef5 	bl	8000150 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	b29a      	uxth	r2, r3
 800136a:	f107 0108 	add.w	r1, r7, #8
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	4820      	ldr	r0, [pc, #128]	; (80013f4 <MPU_Init+0x310>)
 8001374:	f002 f9e5 	bl	8003742 <HAL_UART_Transmit>
		}
	} else	{
		strcpy((char*)bufSerial,"WHO_AM_I_REG ERROR\r\n");
		HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
	}
}
 8001378:	e033      	b.n	80013e2 <MPU_Init+0x2fe>
			strcpy((char*)bufSerial,"ACCEL_CONFIG_REG ERROR\r\n");
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4a25      	ldr	r2, [pc, #148]	; (8001414 <MPU_Init+0x330>)
 8001380:	461c      	mov	r4, r3
 8001382:	4615      	mov	r5, r2
 8001384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001388:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138c:	c403      	stmia	r4!, {r0, r1}
 800138e:	7022      	strb	r2, [r4, #0]
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe fedb 	bl	8000150 <strlen>
 800139a:	4603      	mov	r3, r0
 800139c:	b29a      	uxth	r2, r3
 800139e:	f107 0108 	add.w	r1, r7, #8
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	4813      	ldr	r0, [pc, #76]	; (80013f4 <MPU_Init+0x310>)
 80013a8:	f002 f9cb 	bl	8003742 <HAL_UART_Transmit>
}
 80013ac:	e019      	b.n	80013e2 <MPU_Init+0x2fe>
		strcpy((char*)bufSerial,"WHO_AM_I_REG ERROR\r\n");
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	4a19      	ldr	r2, [pc, #100]	; (8001418 <MPU_Init+0x334>)
 80013b4:	461c      	mov	r4, r3
 80013b6:	4615      	mov	r5, r2
 80013b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013c0:	6020      	str	r0, [r4, #0]
 80013c2:	3404      	adds	r4, #4
 80013c4:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7fe fec0 	bl	8000150 <strlen>
 80013d0:	4603      	mov	r3, r0
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	f107 0108 	add.w	r1, r7, #8
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MPU_Init+0x310>)
 80013de:	f002 f9b0 	bl	8003742 <HAL_UART_Transmit>
}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200000a8 	.word	0x200000a8
 80013f0:	080043c8 	.word	0x080043c8
 80013f4:	20000104 	.word	0x20000104
 80013f8:	080043dc 	.word	0x080043dc
 80013fc:	080043f0 	.word	0x080043f0
 8001400:	08004408 	.word	0x08004408
 8001404:	0800441c 	.word	0x0800441c
 8001408:	08004434 	.word	0x08004434
 800140c:	0800444c 	.word	0x0800444c
 8001410:	08004464 	.word	0x08004464
 8001414:	0800447c 	.word	0x0800447c
 8001418:	08004498 	.word	0x08004498

0800141c <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 800141c:	b5b0      	push	{r4, r5, r7, lr}
 800141e:	b08e      	sub	sp, #56	; 0x38
 8001420:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef retStatus;
	uint8_t bufSerial[30];
	uint8_t bufData[6];
	retStatus = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, bufData, 6, HAL_MAX_DELAY);
 8001422:	23d0      	movs	r3, #208	; 0xd0
 8001424:	b299      	uxth	r1, r3
 8001426:	233b      	movs	r3, #59	; 0x3b
 8001428:	b29a      	uxth	r2, r3
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	2306      	movs	r3, #6
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	463b      	mov	r3, r7
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	483f      	ldr	r0, [pc, #252]	; (8001538 <MPU6050_Read_Accel+0x11c>)
 800143c:	f000 ffac 	bl	8002398 <HAL_I2C_Mem_Read>
 8001440:	4603      	mov	r3, r0
 8001442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(retStatus == HAL_OK)
 8001446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800144a:	2b00      	cmp	r3, #0
 800144c:	d157      	bne.n	80014fe <MPU6050_Read_Accel+0xe2>
	{
		Accel_X_RAW = (int16_t)(bufData[0] << 8 | bufData [1]);
 800144e:	783b      	ldrb	r3, [r7, #0]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b21a      	sxth	r2, r3
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b21a      	sxth	r2, r3
 800145c:	4b37      	ldr	r3, [pc, #220]	; (800153c <MPU6050_Read_Accel+0x120>)
 800145e:	801a      	strh	r2, [r3, #0]
		Accel_Y_RAW = (int16_t)(bufData[2] << 8 | bufData [3]);
 8001460:	78bb      	ldrb	r3, [r7, #2]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	b21b      	sxth	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b21a      	sxth	r2, r3
 800146e:	4b34      	ldr	r3, [pc, #208]	; (8001540 <MPU6050_Read_Accel+0x124>)
 8001470:	801a      	strh	r2, [r3, #0]
		Accel_Z_RAW = (int16_t)(bufData[4] << 8 | bufData [5]);
 8001472:	793b      	ldrb	r3, [r7, #4]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	b21a      	sxth	r2, r3
 8001478:	797b      	ldrb	r3, [r7, #5]
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b21a      	sxth	r2, r3
 8001480:	4b30      	ldr	r3, [pc, #192]	; (8001544 <MPU6050_Read_Accel+0x128>)
 8001482:	801a      	strh	r2, [r3, #0]
		Ax = Accel_X_RAW/16384.0;
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <MPU6050_Read_Accel+0x120>)
 8001486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe ffba 	bl	8000404 <__aeabi_i2d>
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <MPU6050_Read_Accel+0x12c>)
 8001496:	f7ff f949 	bl	800072c <__aeabi_ddiv>
 800149a:	4603      	mov	r3, r0
 800149c:	460c      	mov	r4, r1
 800149e:	4618      	mov	r0, r3
 80014a0:	4621      	mov	r1, r4
 80014a2:	f7ff fa2b 	bl	80008fc <__aeabi_d2f>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4b28      	ldr	r3, [pc, #160]	; (800154c <MPU6050_Read_Accel+0x130>)
 80014aa:	601a      	str	r2, [r3, #0]
		Ay = Accel_Y_RAW/16384.0;
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <MPU6050_Read_Accel+0x124>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ffa6 	bl	8000404 <__aeabi_i2d>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <MPU6050_Read_Accel+0x12c>)
 80014be:	f7ff f935 	bl	800072c <__aeabi_ddiv>
 80014c2:	4603      	mov	r3, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	4618      	mov	r0, r3
 80014c8:	4621      	mov	r1, r4
 80014ca:	f7ff fa17 	bl	80008fc <__aeabi_d2f>
 80014ce:	4602      	mov	r2, r0
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MPU6050_Read_Accel+0x134>)
 80014d2:	601a      	str	r2, [r3, #0]
		Az = Accel_Z_RAW/16384.0;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MPU6050_Read_Accel+0x128>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe ff92 	bl	8000404 <__aeabi_i2d>
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <MPU6050_Read_Accel+0x12c>)
 80014e6:	f7ff f921 	bl	800072c <__aeabi_ddiv>
 80014ea:	4603      	mov	r3, r0
 80014ec:	460c      	mov	r4, r1
 80014ee:	4618      	mov	r0, r3
 80014f0:	4621      	mov	r1, r4
 80014f2:	f7ff fa03 	bl	80008fc <__aeabi_d2f>
 80014f6:	4602      	mov	r2, r0
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <MPU6050_Read_Accel+0x138>)
 80014fa:	601a      	str	r2, [r3, #0]
	} else {
		strcpy((char*)bufSerial,"ACCEL_XOUT_H_REG ERROR\r\n");
		HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
	}
}
 80014fc:	e018      	b.n	8001530 <MPU6050_Read_Accel+0x114>
		strcpy((char*)bufSerial,"ACCEL_XOUT_H_REG ERROR\r\n");
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4a15      	ldr	r2, [pc, #84]	; (8001558 <MPU6050_Read_Accel+0x13c>)
 8001504:	461c      	mov	r4, r3
 8001506:	4615      	mov	r5, r2
 8001508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001510:	c403      	stmia	r4!, {r0, r1}
 8001512:	7022      	strb	r2, [r4, #0]
		HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe fe19 	bl	8000150 <strlen>
 800151e:	4603      	mov	r3, r0
 8001520:	b29a      	uxth	r2, r3
 8001522:	f107 0108 	add.w	r1, r7, #8
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	480c      	ldr	r0, [pc, #48]	; (800155c <MPU6050_Read_Accel+0x140>)
 800152c:	f002 f909 	bl	8003742 <HAL_UART_Transmit>
}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	; 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bdb0      	pop	{r4, r5, r7, pc}
 8001538:	200000a8 	.word	0x200000a8
 800153c:	2000008c 	.word	0x2000008c
 8001540:	2000008e 	.word	0x2000008e
 8001544:	20000090 	.word	0x20000090
 8001548:	40d00000 	.word	0x40d00000
 800154c:	20000144 	.word	0x20000144
 8001550:	200000fc 	.word	0x200000fc
 8001554:	20000148 	.word	0x20000148
 8001558:	080044b0 	.word	0x080044b0
 800155c:	20000104 	.word	0x20000104

08001560 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b08e      	sub	sp, #56	; 0x38
 8001564:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef retStatus;
	uint8_t bufSerial[30];
	uint8_t bufData[6];
	retStatus = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, bufData, 6, HAL_MAX_DELAY);
 8001566:	23d0      	movs	r3, #208	; 0xd0
 8001568:	b299      	uxth	r1, r3
 800156a:	2343      	movs	r3, #67	; 0x43
 800156c:	b29a      	uxth	r2, r3
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	2306      	movs	r3, #6
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	463b      	mov	r3, r7
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2301      	movs	r3, #1
 800157e:	4842      	ldr	r0, [pc, #264]	; (8001688 <MPU6050_Read_Gyro+0x128>)
 8001580:	f000 ff0a 	bl	8002398 <HAL_I2C_Mem_Read>
 8001584:	4603      	mov	r3, r0
 8001586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(retStatus == HAL_OK)
 800158a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800158e:	2b00      	cmp	r3, #0
 8001590:	d157      	bne.n	8001642 <MPU6050_Read_Gyro+0xe2>
	{
		Gyro_X_RAW = (int16_t)(bufData[0] << 8 | bufData [1]);
 8001592:	783b      	ldrb	r3, [r7, #0]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b21a      	sxth	r2, r3
 80015a0:	4b3a      	ldr	r3, [pc, #232]	; (800168c <MPU6050_Read_Gyro+0x12c>)
 80015a2:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW = (int16_t)(bufData[2] << 8 | bufData [3]);
 80015a4:	78bb      	ldrb	r3, [r7, #2]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	4b37      	ldr	r3, [pc, #220]	; (8001690 <MPU6050_Read_Gyro+0x130>)
 80015b4:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW = (int16_t)(bufData[4] << 8 | bufData [5]);
 80015b6:	793b      	ldrb	r3, [r7, #4]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	797b      	ldrb	r3, [r7, #5]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	4b33      	ldr	r3, [pc, #204]	; (8001694 <MPU6050_Read_Gyro+0x134>)
 80015c6:	801a      	strh	r2, [r3, #0]
		Gx = Gyro_X_RAW/131.0;
 80015c8:	4b30      	ldr	r3, [pc, #192]	; (800168c <MPU6050_Read_Gyro+0x12c>)
 80015ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ff18 	bl	8000404 <__aeabi_i2d>
 80015d4:	a32a      	add	r3, pc, #168	; (adr r3, 8001680 <MPU6050_Read_Gyro+0x120>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f8a7 	bl	800072c <__aeabi_ddiv>
 80015de:	4603      	mov	r3, r0
 80015e0:	460c      	mov	r4, r1
 80015e2:	4618      	mov	r0, r3
 80015e4:	4621      	mov	r1, r4
 80015e6:	f7ff f989 	bl	80008fc <__aeabi_d2f>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <MPU6050_Read_Gyro+0x138>)
 80015ee:	601a      	str	r2, [r3, #0]
		Gy = Gyro_Y_RAW/131.0;
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <MPU6050_Read_Gyro+0x130>)
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff04 	bl	8000404 <__aeabi_i2d>
 80015fc:	a320      	add	r3, pc, #128	; (adr r3, 8001680 <MPU6050_Read_Gyro+0x120>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7ff f893 	bl	800072c <__aeabi_ddiv>
 8001606:	4603      	mov	r3, r0
 8001608:	460c      	mov	r4, r1
 800160a:	4618      	mov	r0, r3
 800160c:	4621      	mov	r1, r4
 800160e:	f7ff f975 	bl	80008fc <__aeabi_d2f>
 8001612:	4602      	mov	r2, r0
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <MPU6050_Read_Gyro+0x13c>)
 8001616:	601a      	str	r2, [r3, #0]
		Gz = Gyro_Z_RAW/131.0;
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <MPU6050_Read_Gyro+0x134>)
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fef0 	bl	8000404 <__aeabi_i2d>
 8001624:	a316      	add	r3, pc, #88	; (adr r3, 8001680 <MPU6050_Read_Gyro+0x120>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7ff f87f 	bl	800072c <__aeabi_ddiv>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	4618      	mov	r0, r3
 8001634:	4621      	mov	r1, r4
 8001636:	f7ff f961 	bl	80008fc <__aeabi_d2f>
 800163a:	4602      	mov	r2, r0
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MPU6050_Read_Gyro+0x140>)
 800163e:	601a      	str	r2, [r3, #0]
	} else {
		strcpy((char*)bufSerial,"GYRO_XOUT_H_REG ERROR\r\n");
		HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
	}
}
 8001640:	e018      	b.n	8001674 <MPU6050_Read_Gyro+0x114>
		strcpy((char*)bufSerial,"GYRO_XOUT_H_REG ERROR\r\n");
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <MPU6050_Read_Gyro+0x144>)
 8001648:	461c      	mov	r4, r3
 800164a:	4615      	mov	r5, r2
 800164c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001650:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001654:	e884 0003 	stmia.w	r4, {r0, r1}
		HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fd77 	bl	8000150 <strlen>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	f107 0108 	add.w	r1, r7, #8
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	480e      	ldr	r0, [pc, #56]	; (80016a8 <MPU6050_Read_Gyro+0x148>)
 8001670:	f002 f867 	bl	8003742 <HAL_UART_Transmit>
}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bdb0      	pop	{r4, r5, r7, pc}
 800167c:	f3af 8000 	nop.w
 8001680:	00000000 	.word	0x00000000
 8001684:	40606000 	.word	0x40606000
 8001688:	200000a8 	.word	0x200000a8
 800168c:	20000092 	.word	0x20000092
 8001690:	20000094 	.word	0x20000094
 8001694:	20000096 	.word	0x20000096
 8001698:	200000a4 	.word	0x200000a4
 800169c:	20000100 	.word	0x20000100
 80016a0:	2000014c 	.word	0x2000014c
 80016a4:	080044cc 	.word	0x080044cc
 80016a8:	20000104 	.word	0x20000104

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_MspInit+0x5c>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	4a14      	ldr	r2, [pc, #80]	; (8001714 <HAL_MspInit+0x5c>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6193      	str	r3, [r2, #24]
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_MspInit+0x5c>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <HAL_MspInit+0x5c>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <HAL_MspInit+0x5c>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <HAL_MspInit+0x5c>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_MspInit+0x60>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_MspInit+0x60>)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000
 8001718:	40010000 	.word	0x40010000

0800171c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_I2C_MspInit+0x90>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d132      	bne.n	80017a2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <HAL_I2C_MspInit+0x94>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <HAL_I2C_MspInit+0x94>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_I2C_MspInit+0x94>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001754:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175a:	2312      	movs	r3, #18
 800175c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4812      	ldr	r0, [pc, #72]	; (80017b4 <HAL_I2C_MspInit+0x98>)
 800176a:	f000 fa99 	bl	8001ca0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_I2C_MspInit+0x9c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	f043 0302 	orr.w	r3, r3, #2
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
 8001784:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <HAL_I2C_MspInit+0x9c>)
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_I2C_MspInit+0x94>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_I2C_MspInit+0x94>)
 8001790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_I2C_MspInit+0x94>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40005400 	.word	0x40005400
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010c00 	.word	0x40010c00
 80017b8:	40010000 	.word	0x40010000

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a22      	ldr	r2, [pc, #136]	; (8001860 <HAL_UART_MspInit+0xa4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d13d      	bne.n	8001858 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_UART_MspInit+0xa8>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a20      	ldr	r2, [pc, #128]	; (8001864 <HAL_UART_MspInit+0xa8>)
 80017e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <HAL_UART_MspInit+0xa8>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <HAL_UART_MspInit+0xa8>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a1a      	ldr	r2, [pc, #104]	; (8001864 <HAL_UART_MspInit+0xa8>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_UART_MspInit+0xa8>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800180c:	2340      	movs	r3, #64	; 0x40
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	4812      	ldr	r0, [pc, #72]	; (8001868 <HAL_UART_MspInit+0xac>)
 8001820:	f000 fa3e 	bl	8001ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001828:	2300      	movs	r3, #0
 800182a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	480c      	ldr	r0, [pc, #48]	; (8001868 <HAL_UART_MspInit+0xac>)
 8001838:	f000 fa32 	bl	8001ca0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_UART_MspInit+0xb0>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
 8001852:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_UART_MspInit+0xb0>)
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40013800 	.word	0x40013800
 8001864:	40021000 	.word	0x40021000
 8001868:	40010c00 	.word	0x40010c00
 800186c:	40010000 	.word	0x40010000

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <HardFault_Handler+0x4>

08001882 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <MemManage_Handler+0x4>

08001888 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <BusFault_Handler+0x4>

0800188e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <UsageFault_Handler+0x4>

08001894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 f8ce 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_sbrk+0x50>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x16>
		heap_end = &end;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <_sbrk+0x50>)
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <_sbrk+0x54>)
 80018d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <_sbrk+0x50>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <_sbrk+0x50>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	466a      	mov	r2, sp
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d907      	bls.n	80018fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018ee:	f002 f8e5 	bl	8003abc <__errno>
 80018f2:	4602      	mov	r2, r0
 80018f4:	230c      	movs	r3, #12
 80018f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
 80018fc:	e006      	b.n	800190c <_sbrk+0x48>
	}

	heap_end += incr;
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <_sbrk+0x50>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a03      	ldr	r2, [pc, #12]	; (8001914 <_sbrk+0x50>)
 8001908:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000098 	.word	0x20000098
 8001918:	20000158 	.word	0x20000158

0800191c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <SystemInit+0x5c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <SystemInit+0x5c>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <SystemInit+0x5c>)
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4911      	ldr	r1, [pc, #68]	; (8001978 <SystemInit+0x5c>)
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <SystemInit+0x60>)
 8001934:	4013      	ands	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <SystemInit+0x5c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <SystemInit+0x5c>)
 800193e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <SystemInit+0x5c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <SystemInit+0x5c>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <SystemInit+0x5c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <SystemInit+0x5c>)
 800195a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800195e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SystemInit+0x5c>)
 8001962:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001966:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <SystemInit+0x64>)
 800196a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40021000 	.word	0x40021000
 800197c:	f8ff0000 	.word	0xf8ff0000
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001984:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001986:	e003      	b.n	8001990 <LoopCopyDataInit>

08001988 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800198a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800198c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800198e:	3104      	adds	r1, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001990:	480a      	ldr	r0, [pc, #40]	; (80019bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001994:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001996:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001998:	d3f6      	bcc.n	8001988 <CopyDataInit>
  ldr r2, =_sbss
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800199c:	e002      	b.n	80019a4 <LoopFillZerobss>

0800199e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80019a0:	f842 3b04 	str.w	r3, [r2], #4

080019a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80019a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019a8:	d3f9      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019aa:	f7ff ffb7 	bl	800191c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f002 f88b 	bl	8003ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019b2:	f7ff f963 	bl	8000c7c <main>
  bx lr
 80019b6:	4770      	bx	lr
  ldr r3, =_sidata
 80019b8:	0800454c 	.word	0x0800454c
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019c0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80019c4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80019c8:	20000158 	.word	0x20000158

080019cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC1_2_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_Init+0x28>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_Init+0x28>)
 80019da:	f043 0310 	orr.w	r3, r3, #16
 80019de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f929 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fe64 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f933 	bl	8001c86 <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f909 	bl	8001c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_IncTick+0x1c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_IncTick+0x20>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <HAL_IncTick+0x20>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20000150 	.word	0x20000150

08001a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <HAL_GetTick+0x10>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	20000150 	.word	0x20000150

08001a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff fff0 	bl	8001a80 <HAL_GetTick>
 8001aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d005      	beq.n	8001aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_Delay+0x40>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aba:	bf00      	nop
 8001abc:	f7ff ffe0 	bl	8001a80 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d8f7      	bhi.n	8001abc <HAL_Delay+0x28>
  {
  }
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000008 	.word	0x20000008

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c04:	d301      	bcc.n	8001c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00f      	b.n	8001c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <SysTick_Config+0x40>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c12:	210f      	movs	r1, #15
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f7ff ff90 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <SysTick_Config+0x40>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <SysTick_Config+0x40>)
 8001c24:	2207      	movs	r2, #7
 8001c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	e000e010 	.word	0xe000e010

08001c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff49 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c60:	f7ff ff5e 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	6978      	ldr	r0, [r7, #20]
 8001c6c:	f7ff ff90 	bl	8001b90 <NVIC_EncodePriority>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff5f 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ffb0 	bl	8001bf4 <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b08b      	sub	sp, #44	; 0x2c
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb2:	e127      	b.n	8001f04 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	f040 8116 	bne.w	8001efe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b12      	cmp	r3, #18
 8001cd8:	d034      	beq.n	8001d44 <HAL_GPIO_Init+0xa4>
 8001cda:	2b12      	cmp	r3, #18
 8001cdc:	d80d      	bhi.n	8001cfa <HAL_GPIO_Init+0x5a>
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d02b      	beq.n	8001d3a <HAL_GPIO_Init+0x9a>
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d804      	bhi.n	8001cf0 <HAL_GPIO_Init+0x50>
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d031      	beq.n	8001d4e <HAL_GPIO_Init+0xae>
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d01c      	beq.n	8001d28 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cee:	e048      	b.n	8001d82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d043      	beq.n	8001d7c <HAL_GPIO_Init+0xdc>
 8001cf4:	2b11      	cmp	r3, #17
 8001cf6:	d01b      	beq.n	8001d30 <HAL_GPIO_Init+0x90>
          break;
 8001cf8:	e043      	b.n	8001d82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001cfa:	4a89      	ldr	r2, [pc, #548]	; (8001f20 <HAL_GPIO_Init+0x280>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d026      	beq.n	8001d4e <HAL_GPIO_Init+0xae>
 8001d00:	4a87      	ldr	r2, [pc, #540]	; (8001f20 <HAL_GPIO_Init+0x280>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d806      	bhi.n	8001d14 <HAL_GPIO_Init+0x74>
 8001d06:	4a87      	ldr	r2, [pc, #540]	; (8001f24 <HAL_GPIO_Init+0x284>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d020      	beq.n	8001d4e <HAL_GPIO_Init+0xae>
 8001d0c:	4a86      	ldr	r2, [pc, #536]	; (8001f28 <HAL_GPIO_Init+0x288>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01d      	beq.n	8001d4e <HAL_GPIO_Init+0xae>
          break;
 8001d12:	e036      	b.n	8001d82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d14:	4a85      	ldr	r2, [pc, #532]	; (8001f2c <HAL_GPIO_Init+0x28c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_GPIO_Init+0xae>
 8001d1a:	4a85      	ldr	r2, [pc, #532]	; (8001f30 <HAL_GPIO_Init+0x290>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d016      	beq.n	8001d4e <HAL_GPIO_Init+0xae>
 8001d20:	4a84      	ldr	r2, [pc, #528]	; (8001f34 <HAL_GPIO_Init+0x294>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0xae>
          break;
 8001d26:	e02c      	b.n	8001d82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	623b      	str	r3, [r7, #32]
          break;
 8001d2e:	e028      	b.n	8001d82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	3304      	adds	r3, #4
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e023      	b.n	8001d82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	3308      	adds	r3, #8
 8001d40:	623b      	str	r3, [r7, #32]
          break;
 8001d42:	e01e      	b.n	8001d82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	330c      	adds	r3, #12
 8001d4a:	623b      	str	r3, [r7, #32]
          break;
 8001d4c:	e019      	b.n	8001d82 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d56:	2304      	movs	r3, #4
 8001d58:	623b      	str	r3, [r7, #32]
          break;
 8001d5a:	e012      	b.n	8001d82 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d64:	2308      	movs	r3, #8
 8001d66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	611a      	str	r2, [r3, #16]
          break;
 8001d6e:	e008      	b.n	8001d82 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d70:	2308      	movs	r3, #8
 8001d72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	615a      	str	r2, [r3, #20]
          break;
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
          break;
 8001d80:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2bff      	cmp	r3, #255	; 0xff
 8001d86:	d801      	bhi.n	8001d8c <HAL_GPIO_Init+0xec>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	e001      	b.n	8001d90 <HAL_GPIO_Init+0xf0>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2bff      	cmp	r3, #255	; 0xff
 8001d96:	d802      	bhi.n	8001d9e <HAL_GPIO_Init+0xfe>
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_Init+0x104>
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	3b08      	subs	r3, #8
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	210f      	movs	r1, #15
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	401a      	ands	r2, r3
 8001db6:	6a39      	ldr	r1, [r7, #32]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8096 	beq.w	8001efe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd2:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_GPIO_Init+0x298>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <HAL_GPIO_Init+0x298>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6193      	str	r3, [r2, #24]
 8001dde:	4b56      	ldr	r3, [pc, #344]	; (8001f38 <HAL_GPIO_Init+0x298>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dea:	4a54      	ldr	r2, [pc, #336]	; (8001f3c <HAL_GPIO_Init+0x29c>)
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	220f      	movs	r2, #15
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4b      	ldr	r2, [pc, #300]	; (8001f40 <HAL_GPIO_Init+0x2a0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x19e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4a      	ldr	r2, [pc, #296]	; (8001f44 <HAL_GPIO_Init+0x2a4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x19a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a49      	ldr	r2, [pc, #292]	; (8001f48 <HAL_GPIO_Init+0x2a8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x196>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a48      	ldr	r2, [pc, #288]	; (8001f4c <HAL_GPIO_Init+0x2ac>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x192>
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x1a0>
 8001e32:	2304      	movs	r3, #4
 8001e34:	e004      	b.n	8001e40 <HAL_GPIO_Init+0x1a0>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e002      	b.n	8001e40 <HAL_GPIO_Init+0x1a0>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x1a0>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	f002 0203 	and.w	r2, r2, #3
 8001e46:	0092      	lsls	r2, r2, #2
 8001e48:	4093      	lsls	r3, r2
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e50:	493a      	ldr	r1, [pc, #232]	; (8001f3c <HAL_GPIO_Init+0x29c>)
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	3302      	adds	r3, #2
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e6a:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4938      	ldr	r1, [pc, #224]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
 8001e76:	e006      	b.n	8001e86 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	4933      	ldr	r1, [pc, #204]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e92:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	492e      	ldr	r1, [pc, #184]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
 8001e9e:	e006      	b.n	8001eae <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	4929      	ldr	r1, [pc, #164]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d006      	beq.n	8001ec8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	4924      	ldr	r1, [pc, #144]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
 8001ec6:	e006      	b.n	8001ed6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	491f      	ldr	r1, [pc, #124]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	491a      	ldr	r1, [pc, #104]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60cb      	str	r3, [r1, #12]
 8001eee:	e006      	b.n	8001efe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	4915      	ldr	r1, [pc, #84]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	3301      	adds	r3, #1
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f47f aed0 	bne.w	8001cb4 <HAL_GPIO_Init+0x14>
  }
}
 8001f14:	bf00      	nop
 8001f16:	372c      	adds	r7, #44	; 0x2c
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	10210000 	.word	0x10210000
 8001f24:	10110000 	.word	0x10110000
 8001f28:	10120000 	.word	0x10120000
 8001f2c:	10310000 	.word	0x10310000
 8001f30:	10320000 	.word	0x10320000
 8001f34:	10220000 	.word	0x10220000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	40010800 	.word	0x40010800
 8001f44:	40010c00 	.word	0x40010c00
 8001f48:	40011000 	.word	0x40011000
 8001f4c:	40011400 	.word	0x40011400
 8001f50:	40010400 	.word	0x40010400

08001f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e10f      	b.n	8002186 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fbce 	bl	800171c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2224      	movs	r2, #36	; 0x24
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f98:	f001 fb40 	bl	800361c <HAL_RCC_GetPCLK1Freq>
 8001f9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4a7b      	ldr	r2, [pc, #492]	; (8002190 <HAL_I2C_Init+0x23c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d807      	bhi.n	8001fb8 <HAL_I2C_Init+0x64>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a7a      	ldr	r2, [pc, #488]	; (8002194 <HAL_I2C_Init+0x240>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	bf94      	ite	ls
 8001fb0:	2301      	movls	r3, #1
 8001fb2:	2300      	movhi	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	e006      	b.n	8001fc6 <HAL_I2C_Init+0x72>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a77      	ldr	r2, [pc, #476]	; (8002198 <HAL_I2C_Init+0x244>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	bf94      	ite	ls
 8001fc0:	2301      	movls	r3, #1
 8001fc2:	2300      	movhi	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0db      	b.n	8002186 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a72      	ldr	r2, [pc, #456]	; (800219c <HAL_I2C_Init+0x248>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0c9b      	lsrs	r3, r3, #18
 8001fd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a64      	ldr	r2, [pc, #400]	; (8002190 <HAL_I2C_Init+0x23c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d802      	bhi.n	8002008 <HAL_I2C_Init+0xb4>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3301      	adds	r3, #1
 8002006:	e009      	b.n	800201c <HAL_I2C_Init+0xc8>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	4a63      	ldr	r2, [pc, #396]	; (80021a0 <HAL_I2C_Init+0x24c>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	099b      	lsrs	r3, r3, #6
 800201a:	3301      	adds	r3, #1
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	430b      	orrs	r3, r1
 8002022:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800202e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4956      	ldr	r1, [pc, #344]	; (8002190 <HAL_I2C_Init+0x23c>)
 8002038:	428b      	cmp	r3, r1
 800203a:	d80d      	bhi.n	8002058 <HAL_I2C_Init+0x104>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1e59      	subs	r1, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fbb1 f3f3 	udiv	r3, r1, r3
 800204a:	3301      	adds	r3, #1
 800204c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002050:	2b04      	cmp	r3, #4
 8002052:	bf38      	it	cc
 8002054:	2304      	movcc	r3, #4
 8002056:	e04f      	b.n	80020f8 <HAL_I2C_Init+0x1a4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d111      	bne.n	8002084 <HAL_I2C_Init+0x130>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1e58      	subs	r0, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	440b      	add	r3, r1
 800206e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002072:	3301      	adds	r3, #1
 8002074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e012      	b.n	80020aa <HAL_I2C_Init+0x156>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e58      	subs	r0, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	0099      	lsls	r1, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	fbb0 f3f3 	udiv	r3, r0, r3
 800209a:	3301      	adds	r3, #1
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Init+0x15e>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e022      	b.n	80020f8 <HAL_I2C_Init+0x1a4>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10e      	bne.n	80020d8 <HAL_I2C_Init+0x184>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1e58      	subs	r0, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	440b      	add	r3, r1
 80020c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d6:	e00f      	b.n	80020f8 <HAL_I2C_Init+0x1a4>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1e58      	subs	r0, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	0099      	lsls	r1, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	6809      	ldr	r1, [r1, #0]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69da      	ldr	r2, [r3, #28]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002126:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6911      	ldr	r1, [r2, #16]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68d2      	ldr	r2, [r2, #12]
 8002132:	4311      	orrs	r1, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	430b      	orrs	r3, r1
 800213a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	000186a0 	.word	0x000186a0
 8002194:	001e847f 	.word	0x001e847f
 8002198:	003d08ff 	.word	0x003d08ff
 800219c:	431bde83 	.word	0x431bde83
 80021a0:	10624dd3 	.word	0x10624dd3

080021a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	4608      	mov	r0, r1
 80021ae:	4611      	mov	r1, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	817b      	strh	r3, [r7, #10]
 80021b6:	460b      	mov	r3, r1
 80021b8:	813b      	strh	r3, [r7, #8]
 80021ba:	4613      	mov	r3, r2
 80021bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021be:	f7ff fc5f 	bl	8001a80 <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	f040 80d9 	bne.w	8002384 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2319      	movs	r3, #25
 80021d8:	2201      	movs	r2, #1
 80021da:	496d      	ldr	r1, [pc, #436]	; (8002390 <HAL_I2C_Mem_Write+0x1ec>)
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fc6b 	bl	8002ab8 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021e8:	2302      	movs	r3, #2
 80021ea:	e0cc      	b.n	8002386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_I2C_Mem_Write+0x56>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e0c5      	b.n	8002386 <HAL_I2C_Mem_Write+0x1e2>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d007      	beq.n	8002220 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2221      	movs	r2, #33	; 0x21
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2240      	movs	r2, #64	; 0x40
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a3a      	ldr	r2, [r7, #32]
 800224a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4a4d      	ldr	r2, [pc, #308]	; (8002394 <HAL_I2C_Mem_Write+0x1f0>)
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002262:	88f8      	ldrh	r0, [r7, #6]
 8002264:	893a      	ldrh	r2, [r7, #8]
 8002266:	8979      	ldrh	r1, [r7, #10]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	4603      	mov	r3, r0
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fac6 	bl	8002804 <I2C_RequestMemoryWrite>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d052      	beq.n	8002324 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e081      	b.n	8002386 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fcec 	bl	8002c64 <I2C_WaitOnTXEFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00d      	beq.n	80022ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2b04      	cmp	r3, #4
 8002298:	d107      	bne.n	80022aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06b      	b.n	8002386 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d11b      	bne.n	8002324 <HAL_I2C_Mem_Write+0x180>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d017      	beq.n	8002324 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1aa      	bne.n	8002282 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 fcd8 	bl	8002ce6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00d      	beq.n	8002358 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	2b04      	cmp	r3, #4
 8002342:	d107      	bne.n	8002354 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002352:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e016      	b.n	8002386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e000      	b.n	8002386 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
  }
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	00100002 	.word	0x00100002
 8002394:	ffff0000 	.word	0xffff0000

08002398 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	4608      	mov	r0, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	817b      	strh	r3, [r7, #10]
 80023aa:	460b      	mov	r3, r1
 80023ac:	813b      	strh	r3, [r7, #8]
 80023ae:	4613      	mov	r3, r2
 80023b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023b2:	f7ff fb65 	bl	8001a80 <HAL_GetTick>
 80023b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	f040 8218 	bne.w	80027f6 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2319      	movs	r3, #25
 80023cc:	2201      	movs	r2, #1
 80023ce:	4981      	ldr	r1, [pc, #516]	; (80025d4 <HAL_I2C_Mem_Read+0x23c>)
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fb71 	bl	8002ab8 <I2C_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023dc:	2302      	movs	r3, #2
 80023de:	e20b      	b.n	80027f8 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_I2C_Mem_Read+0x56>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e204      	b.n	80027f8 <HAL_I2C_Mem_Read+0x460>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d007      	beq.n	8002414 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2222      	movs	r2, #34	; 0x22
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2240      	movs	r2, #64	; 0x40
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800243e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a61      	ldr	r2, [pc, #388]	; (80025d8 <HAL_I2C_Mem_Read+0x240>)
 8002454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002456:	88f8      	ldrh	r0, [r7, #6]
 8002458:	893a      	ldrh	r2, [r7, #8]
 800245a:	8979      	ldrh	r1, [r7, #10]
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	4603      	mov	r3, r0
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fa56 	bl	8002918 <I2C_RequestMemoryRead>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e1c0      	b.n	80027f8 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	2b00      	cmp	r3, #0
 800247c:	d113      	bne.n	80024a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	623b      	str	r3, [r7, #32]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	623b      	str	r3, [r7, #32]
 8002492:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e194      	b.n	80027d0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d11d      	bne.n	80024ea <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024bc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024be:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024e6:	b662      	cpsie	i
 80024e8:	e172      	b.n	80027d0 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d11d      	bne.n	800252e <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002500:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002502:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002504:	2300      	movs	r3, #0
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002528:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800252a:	b662      	cpsie	i
 800252c:	e150      	b.n	80027d0 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800253c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002554:	e13c      	b.n	80027d0 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255a:	2b03      	cmp	r3, #3
 800255c:	f200 80f5 	bhi.w	800274a <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	2b01      	cmp	r3, #1
 8002566:	d123      	bne.n	80025b0 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fbfb 	bl	8002d68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e13d      	b.n	80027f8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025ae:	e10f      	b.n	80027d0 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d150      	bne.n	800265a <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025be:	2200      	movs	r2, #0
 80025c0:	4906      	ldr	r1, [pc, #24]	; (80025dc <HAL_I2C_Mem_Read+0x244>)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fa78 	bl	8002ab8 <I2C_WaitOnFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d008      	beq.n	80025e0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e112      	b.n	80027f8 <HAL_I2C_Mem_Read+0x460>
 80025d2:	bf00      	nop
 80025d4:	00100002 	.word	0x00100002
 80025d8:	ffff0000 	.word	0xffff0000
 80025dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025e0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002624:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002658:	e0ba      	b.n	80027d0 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	2200      	movs	r2, #0
 8002662:	4967      	ldr	r1, [pc, #412]	; (8002800 <HAL_I2C_Mem_Read+0x468>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fa27 	bl	8002ab8 <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0c1      	b.n	80027f8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002682:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002684:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026be:	2200      	movs	r2, #0
 80026c0:	494f      	ldr	r1, [pc, #316]	; (8002800 <HAL_I2C_Mem_Read+0x468>)
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f9f8 	bl	8002ab8 <I2C_WaitOnFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e092      	b.n	80027f8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002714:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002748:	e042      	b.n	80027d0 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fb0a 	bl	8002d68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e04c      	b.n	80027f8 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b04      	cmp	r3, #4
 800279c:	d118      	bne.n	80027d0 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f47f aebe 	bne.w	8002556 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e000      	b.n	80027f8 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
  }
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3728      	adds	r7, #40	; 0x28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	00010004 	.word	0x00010004

08002804 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4603      	mov	r3, r0
 8002814:	817b      	strh	r3, [r7, #10]
 8002816:	460b      	mov	r3, r1
 8002818:	813b      	strh	r3, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800282c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	2200      	movs	r2, #0
 8002836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f93c 	bl	8002ab8 <I2C_WaitOnFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e05f      	b.n	800290a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800284a:	897b      	ldrh	r3, [r7, #10]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	6a3a      	ldr	r2, [r7, #32]
 800285e:	492d      	ldr	r1, [pc, #180]	; (8002914 <I2C_RequestMemoryWrite+0x110>)
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f980 	bl	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e04c      	b.n	800290a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002888:	6a39      	ldr	r1, [r7, #32]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f9ea 	bl	8002c64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00d      	beq.n	80028b2 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b04      	cmp	r3, #4
 800289c:	d107      	bne.n	80028ae <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e02b      	b.n	800290a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028b8:	893b      	ldrh	r3, [r7, #8]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	611a      	str	r2, [r3, #16]
 80028c2:	e021      	b.n	8002908 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028c4:	893b      	ldrh	r3, [r7, #8]
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	6a39      	ldr	r1, [r7, #32]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f9c4 	bl	8002c64 <I2C_WaitOnTXEFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d107      	bne.n	80028fa <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e005      	b.n	800290a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028fe:	893b      	ldrh	r3, [r7, #8]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	00010002 	.word	0x00010002

08002918 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	461a      	mov	r2, r3
 8002926:	4603      	mov	r3, r0
 8002928:	817b      	strh	r3, [r7, #10]
 800292a:	460b      	mov	r3, r1
 800292c:	813b      	strh	r3, [r7, #8]
 800292e:	4613      	mov	r3, r2
 8002930:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002940:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002950:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	2200      	movs	r2, #0
 800295a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f8aa 	bl	8002ab8 <I2C_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e09e      	b.n	8002aac <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800296e:	897b      	ldrh	r3, [r7, #10]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800297c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	6a3a      	ldr	r2, [r7, #32]
 8002982:	494c      	ldr	r1, [pc, #304]	; (8002ab4 <I2C_RequestMemoryRead+0x19c>)
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f8ee 	bl	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e08b      	b.n	8002aac <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ac:	6a39      	ldr	r1, [r7, #32]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f958 	bl	8002c64 <I2C_WaitOnTXEFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d107      	bne.n	80029d2 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e06a      	b.n	8002aac <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d105      	bne.n	80029e8 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029dc:	893b      	ldrh	r3, [r7, #8]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	611a      	str	r2, [r3, #16]
 80029e6:	e021      	b.n	8002a2c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029e8:	893b      	ldrh	r3, [r7, #8]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f8:	6a39      	ldr	r1, [r7, #32]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f932 	bl	8002c64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00d      	beq.n	8002a22 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d107      	bne.n	8002a1e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e044      	b.n	8002aac <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a22:	893b      	ldrh	r3, [r7, #8]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2e:	6a39      	ldr	r1, [r7, #32]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f917 	bl	8002c64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d107      	bne.n	8002a54 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e029      	b.n	8002aac <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f81f 	bl	8002ab8 <I2C_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e013      	b.n	8002aac <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a84:	897b      	ldrh	r3, [r7, #10]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	6a3a      	ldr	r2, [r7, #32]
 8002a98:	4906      	ldr	r1, [pc, #24]	; (8002ab4 <I2C_RequestMemoryRead+0x19c>)
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f863 	bl	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	00010002 	.word	0x00010002

08002ab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac8:	e025      	b.n	8002b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d021      	beq.n	8002b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad2:	f7fe ffd5 	bl	8001a80 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d302      	bcc.n	8002ae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d116      	bne.n	8002b16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f043 0220 	orr.w	r2, r3, #32
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e023      	b.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10d      	bne.n	8002b3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	e00c      	b.n	8002b56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4013      	ands	r3, r2
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf0c      	ite	eq
 8002b4e:	2301      	moveq	r3, #1
 8002b50:	2300      	movne	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d0b6      	beq.n	8002aca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b74:	e051      	b.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b84:	d123      	bne.n	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 0204 	orr.w	r2, r3, #4
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e046      	b.n	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d021      	beq.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd6:	f7fe ff53 	bl	8001a80 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d302      	bcc.n	8002bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d116      	bne.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f043 0220 	orr.w	r2, r3, #32
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e020      	b.n	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d10c      	bne.n	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	e00b      	b.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	43da      	mvns	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d18d      	bne.n	8002b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c70:	e02d      	b.n	8002cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f8ce 	bl	8002e14 <I2C_IsAcknowledgeFailed>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e02d      	b.n	8002cde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d021      	beq.n	8002cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8a:	f7fe fef9 	bl	8001a80 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d116      	bne.n	8002cce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f043 0220 	orr.w	r2, r3, #32
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e007      	b.n	8002cde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b80      	cmp	r3, #128	; 0x80
 8002cda:	d1ca      	bne.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf2:	e02d      	b.n	8002d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f88d 	bl	8002e14 <I2C_IsAcknowledgeFailed>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e02d      	b.n	8002d60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0a:	d021      	beq.n	8002d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0c:	f7fe feb8 	bl	8001a80 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d302      	bcc.n	8002d22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d116      	bne.n	8002d50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e007      	b.n	8002d60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d1ca      	bne.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d74:	e042      	b.n	8002dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d119      	bne.n	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0210 	mvn.w	r2, #16
 8002d8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e029      	b.n	8002e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db8:	f7fe fe62 	bl	8001a80 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d302      	bcc.n	8002dce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d116      	bne.n	8002dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e007      	b.n	8002e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e06:	2b40      	cmp	r3, #64	; 0x40
 8002e08:	d1b5      	bne.n	8002d76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2a:	d11b      	bne.n	8002e64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f043 0204 	orr.w	r2, r3, #4
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e26c      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8087 	beq.w	8002f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e90:	4b92      	ldr	r3, [pc, #584]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d00c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e9c:	4b8f      	ldr	r3, [pc, #572]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d112      	bne.n	8002ece <HAL_RCC_OscConfig+0x5e>
 8002ea8:	4b8c      	ldr	r3, [pc, #560]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d10b      	bne.n	8002ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb6:	4b89      	ldr	r3, [pc, #548]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d06c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x12c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d168      	bne.n	8002f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e246      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x76>
 8002ed8:	4b80      	ldr	r3, [pc, #512]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a7f      	ldr	r2, [pc, #508]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	e02e      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x98>
 8002eee:	4b7b      	ldr	r3, [pc, #492]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a7a      	ldr	r2, [pc, #488]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b78      	ldr	r3, [pc, #480]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a77      	ldr	r2, [pc, #476]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e01d      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0xbc>
 8002f12:	4b72      	ldr	r3, [pc, #456]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a71      	ldr	r2, [pc, #452]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002f2c:	4b6b      	ldr	r3, [pc, #428]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6a      	ldr	r2, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a67      	ldr	r2, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fd98 	bl	8001a80 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe fd94 	bl	8001a80 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1fa      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b5d      	ldr	r3, [pc, #372]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0xe4>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe fd84 	bl	8001a80 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fd80 	bl	8001a80 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1e6      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	4b53      	ldr	r3, [pc, #332]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x10c>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002faa:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fb6:	4b49      	ldr	r3, [pc, #292]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d11c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x18c>
 8002fc2:	4b46      	ldr	r3, [pc, #280]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d116      	bne.n	8002ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fce:	4b43      	ldr	r3, [pc, #268]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x176>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e1ba      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4939      	ldr	r1, [pc, #228]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	e03a      	b.n	8003072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003004:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fe fd39 	bl	8001a80 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003012:	f7fe fd35 	bl	8001a80 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e19b      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003030:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4927      	ldr	r1, [pc, #156]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]
 8003044:	e015      	b.n	8003072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fe fd18 	bl	8001a80 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003054:	f7fe fd14 	bl	8001a80 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e17a      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d03a      	beq.n	80030f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d019      	beq.n	80030ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_RCC_OscConfig+0x274>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308c:	f7fe fcf8 	bl	8001a80 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003094:	f7fe fcf4 	bl	8001a80 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e15a      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030b2:	2001      	movs	r0, #1
 80030b4:	f000 fada 	bl	800366c <RCC_Delay>
 80030b8:	e01c      	b.n	80030f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_RCC_OscConfig+0x274>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7fe fcde 	bl	8001a80 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c6:	e00f      	b.n	80030e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c8:	f7fe fcda 	bl	8001a80 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d908      	bls.n	80030e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e140      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	42420000 	.word	0x42420000
 80030e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	4b9e      	ldr	r3, [pc, #632]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e9      	bne.n	80030c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a6 	beq.w	800324e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003106:	4b97      	ldr	r3, [pc, #604]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10d      	bne.n	800312e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	4b94      	ldr	r3, [pc, #592]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	4a93      	ldr	r2, [pc, #588]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	61d3      	str	r3, [r2, #28]
 800311e:	4b91      	ldr	r3, [pc, #580]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	4b8e      	ldr	r3, [pc, #568]	; (8003368 <HAL_RCC_OscConfig+0x4f8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d118      	bne.n	800316c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313a:	4b8b      	ldr	r3, [pc, #556]	; (8003368 <HAL_RCC_OscConfig+0x4f8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a8a      	ldr	r2, [pc, #552]	; (8003368 <HAL_RCC_OscConfig+0x4f8>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003146:	f7fe fc9b 	bl	8001a80 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fe fc97 	bl	8001a80 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b64      	cmp	r3, #100	; 0x64
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e0fd      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	4b81      	ldr	r3, [pc, #516]	; (8003368 <HAL_RCC_OscConfig+0x4f8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x312>
 8003174:	4b7b      	ldr	r3, [pc, #492]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	4a7a      	ldr	r2, [pc, #488]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6213      	str	r3, [r2, #32]
 8003180:	e02d      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x334>
 800318a:	4b76      	ldr	r3, [pc, #472]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4a75      	ldr	r2, [pc, #468]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	6213      	str	r3, [r2, #32]
 8003196:	4b73      	ldr	r3, [pc, #460]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4a72      	ldr	r2, [pc, #456]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 800319c:	f023 0304 	bic.w	r3, r3, #4
 80031a0:	6213      	str	r3, [r2, #32]
 80031a2:	e01c      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x356>
 80031ac:	4b6d      	ldr	r3, [pc, #436]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a6c      	ldr	r2, [pc, #432]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	4b6a      	ldr	r3, [pc, #424]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4a69      	ldr	r2, [pc, #420]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	e00b      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 80031c6:	4b67      	ldr	r3, [pc, #412]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4a66      	ldr	r2, [pc, #408]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	6213      	str	r3, [r2, #32]
 80031d2:	4b64      	ldr	r3, [pc, #400]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a63      	ldr	r2, [pc, #396]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80031d8:	f023 0304 	bic.w	r3, r3, #4
 80031dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d015      	beq.n	8003212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e6:	f7fe fc4b 	bl	8001a80 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fe fc47 	bl	8001a80 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0ab      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	4b57      	ldr	r3, [pc, #348]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ee      	beq.n	80031ee <HAL_RCC_OscConfig+0x37e>
 8003210:	e014      	b.n	800323c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7fe fc35 	bl	8001a80 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe fc31 	bl	8001a80 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e095      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1ee      	bne.n	800321a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d105      	bne.n	800324e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003242:	4b48      	ldr	r3, [pc, #288]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4a47      	ldr	r2, [pc, #284]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8081 	beq.w	800335a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003258:	4b42      	ldr	r3, [pc, #264]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	d061      	beq.n	8003328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d146      	bne.n	80032fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326c:	4b3f      	ldr	r3, [pc, #252]	; (800336c <HAL_RCC_OscConfig+0x4fc>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fe fc05 	bl	8001a80 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327a:	f7fe fc01 	bl	8001a80 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e067      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328c:	4b35      	ldr	r3, [pc, #212]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d108      	bne.n	80032b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032a2:	4b30      	ldr	r3, [pc, #192]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	492d      	ldr	r1, [pc, #180]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b4:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a19      	ldr	r1, [r3, #32]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	430b      	orrs	r3, r1
 80032c6:	4927      	ldr	r1, [pc, #156]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032cc:	4b27      	ldr	r3, [pc, #156]	; (800336c <HAL_RCC_OscConfig+0x4fc>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fe fbd5 	bl	8001a80 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032da:	f7fe fbd1 	bl	8001a80 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e037      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x46a>
 80032f8:	e02f      	b.n	800335a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <HAL_RCC_OscConfig+0x4fc>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe fbbe 	bl	8001a80 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003308:	f7fe fbba 	bl	8001a80 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e020      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x498>
 8003326:	e018      	b.n	800335a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e013      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCC_OscConfig+0x4f4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	429a      	cmp	r2, r3
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	40007000 	.word	0x40007000
 800336c:	42420060 	.word	0x42420060

08003370 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0d0      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003384:	4b6a      	ldr	r3, [pc, #424]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d910      	bls.n	80033b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b67      	ldr	r3, [pc, #412]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 0207 	bic.w	r2, r3, #7
 800339a:	4965      	ldr	r1, [pc, #404]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	4313      	orrs	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b63      	ldr	r3, [pc, #396]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0b8      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d020      	beq.n	8003402 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033cc:	4b59      	ldr	r3, [pc, #356]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a58      	ldr	r2, [pc, #352]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e4:	4b53      	ldr	r3, [pc, #332]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4a52      	ldr	r2, [pc, #328]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f0:	4b50      	ldr	r3, [pc, #320]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	494d      	ldr	r1, [pc, #308]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d040      	beq.n	8003490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d115      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e07f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e073      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e06b      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344e:	4b39      	ldr	r3, [pc, #228]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4936      	ldr	r1, [pc, #216]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003460:	f7fe fb0e 	bl	8001a80 <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	e00a      	b.n	800347e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003468:	f7fe fb0a 	bl	8001a80 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e053      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 020c 	and.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	429a      	cmp	r2, r3
 800348e:	d1eb      	bne.n	8003468 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d210      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b24      	ldr	r3, [pc, #144]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 0207 	bic.w	r2, r3, #7
 80034a6:	4922      	ldr	r1, [pc, #136]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b20      	ldr	r3, [pc, #128]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e032      	b.n	8003526 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034cc:	4b19      	ldr	r3, [pc, #100]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4916      	ldr	r1, [pc, #88]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ea:	4b12      	ldr	r3, [pc, #72]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	490e      	ldr	r1, [pc, #56]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034fe:	f000 f821 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8003502:	4601      	mov	r1, r0
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	5cd3      	ldrb	r3, [r2, r3]
 8003512:	fa21 f303 	lsr.w	r3, r1, r3
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_RCC_ClockConfig+0x1cc>)
 8003518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_ClockConfig+0x1d0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fa6c 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40022000 	.word	0x40022000
 8003534:	40021000 	.word	0x40021000
 8003538:	080044f8 	.word	0x080044f8
 800353c:	20000000 	.word	0x20000000
 8003540:	20000004 	.word	0x20000004

08003544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003544:	b490      	push	{r4, r7}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800354a:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800354c:	1d3c      	adds	r4, r7, #4
 800354e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003554:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800356e:	4b23      	ldr	r3, [pc, #140]	; (80035fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b04      	cmp	r3, #4
 800357c:	d002      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x40>
 800357e:	2b08      	cmp	r3, #8
 8003580:	d003      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x46>
 8003582:	e02d      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003584:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003586:	623b      	str	r3, [r7, #32]
      break;
 8003588:	e02d      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	0c9b      	lsrs	r3, r3, #18
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003596:	4413      	add	r3, r2
 8003598:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800359c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	0c5b      	lsrs	r3, r3, #17
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035b6:	4413      	add	r3, r2
 80035b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	4a0f      	ldr	r2, [pc, #60]	; (8003600 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035c2:	fb02 f203 	mul.w	r2, r2, r3
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	e004      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	623b      	str	r3, [r7, #32]
      break;
 80035de:	e002      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035e2:	623b      	str	r3, [r7, #32]
      break;
 80035e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e6:	6a3b      	ldr	r3, [r7, #32]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3728      	adds	r7, #40	; 0x28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc90      	pop	{r4, r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	080044e4 	.word	0x080044e4
 80035f8:	080044f4 	.word	0x080044f4
 80035fc:	40021000 	.word	0x40021000
 8003600:	007a1200 	.word	0x007a1200
 8003604:	003d0900 	.word	0x003d0900

08003608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800360c:	4b02      	ldr	r3, [pc, #8]	; (8003618 <HAL_RCC_GetHCLKFreq+0x10>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	20000000 	.word	0x20000000

0800361c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003620:	f7ff fff2 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 8003624:	4601      	mov	r1, r0
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	4a03      	ldr	r2, [pc, #12]	; (8003640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003632:	5cd3      	ldrb	r3, [r2, r3]
 8003634:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	08004508 	.word	0x08004508

08003644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003648:	f7ff ffde 	bl	8003608 <HAL_RCC_GetHCLKFreq>
 800364c:	4601      	mov	r1, r0
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	0adb      	lsrs	r3, r3, #11
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4a03      	ldr	r2, [pc, #12]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800365a:	5cd3      	ldrb	r3, [r2, r3]
 800365c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	08004508 	.word	0x08004508

0800366c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <RCC_Delay+0x34>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <RCC_Delay+0x38>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0a5b      	lsrs	r3, r3, #9
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003688:	bf00      	nop
  }
  while (Delay --);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1e5a      	subs	r2, r3, #1
 800368e:	60fa      	str	r2, [r7, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f9      	bne.n	8003688 <RCC_Delay+0x1c>
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20000000 	.word	0x20000000
 80036a4:	10624dd3 	.word	0x10624dd3

080036a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e03f      	b.n	800373a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fe f874 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2224      	movs	r2, #36	; 0x24
 80036d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f90b 	bl	8003908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b088      	sub	sp, #32
 8003746:	af02      	add	r7, sp, #8
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b20      	cmp	r3, #32
 8003760:	f040 8083 	bne.w	800386a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_UART_Transmit+0x2e>
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e07b      	b.n	800386c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_UART_Transmit+0x40>
 800377e:	2302      	movs	r3, #2
 8003780:	e074      	b.n	800386c <HAL_UART_Transmit+0x12a>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2221      	movs	r2, #33	; 0x21
 8003794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003798:	f7fe f972 	bl	8001a80 <HAL_GetTick>
 800379c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	88fa      	ldrh	r2, [r7, #6]
 80037a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037aa:	e042      	b.n	8003832 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c2:	d122      	bne.n	800380a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2200      	movs	r2, #0
 80037cc:	2180      	movs	r1, #128	; 0x80
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f850 	bl	8003874 <UART_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e046      	b.n	800386c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	3302      	adds	r3, #2
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	e017      	b.n	8003832 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3301      	adds	r3, #1
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	e013      	b.n	8003832 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	2180      	movs	r1, #128	; 0x80
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f82d 	bl	8003874 <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e023      	b.n	800386c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	60ba      	str	r2, [r7, #8]
 800382a:	781a      	ldrb	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1b7      	bne.n	80037ac <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2200      	movs	r2, #0
 8003844:	2140      	movs	r1, #64	; 0x40
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f814 	bl	8003874 <UART_WaitOnFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e00a      	b.n	800386c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800386a:	2302      	movs	r3, #2
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003884:	e02c      	b.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d028      	beq.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003894:	f7fe f8f4 	bl	8001a80 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d21d      	bcs.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e00f      	b.n	8003900 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4013      	ands	r3, r2
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d0c3      	beq.n	8003886 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003942:	f023 030c 	bic.w	r3, r3, #12
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	430b      	orrs	r3, r1
 800394e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a52      	ldr	r2, [pc, #328]	; (8003ab4 <UART_SetConfig+0x1ac>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d14e      	bne.n	8003a0e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003970:	f7ff fe68 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 8003974:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	009a      	lsls	r2, r3, #2
 8003980:	441a      	add	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	4a4a      	ldr	r2, [pc, #296]	; (8003ab8 <UART_SetConfig+0x1b0>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	0119      	lsls	r1, r3, #4
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009a      	lsls	r2, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ac:	4b42      	ldr	r3, [pc, #264]	; (8003ab8 <UART_SetConfig+0x1b0>)
 80039ae:	fba3 0302 	umull	r0, r3, r3, r2
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	2064      	movs	r0, #100	; 0x64
 80039b6:	fb00 f303 	mul.w	r3, r0, r3
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	3332      	adds	r3, #50	; 0x32
 80039c0:	4a3d      	ldr	r2, [pc, #244]	; (8003ab8 <UART_SetConfig+0x1b0>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039cc:	4419      	add	r1, r3
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	009a      	lsls	r2, r3, #2
 80039d8:	441a      	add	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e4:	4b34      	ldr	r3, [pc, #208]	; (8003ab8 <UART_SetConfig+0x1b0>)
 80039e6:	fba3 0302 	umull	r0, r3, r3, r2
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	2064      	movs	r0, #100	; 0x64
 80039ee:	fb00 f303 	mul.w	r3, r0, r3
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	3332      	adds	r3, #50	; 0x32
 80039f8:	4a2f      	ldr	r2, [pc, #188]	; (8003ab8 <UART_SetConfig+0x1b0>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	f003 020f 	and.w	r2, r3, #15
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	440a      	add	r2, r1
 8003a0a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003a0c:	e04d      	b.n	8003aaa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a0e:	f7ff fe05 	bl	800361c <HAL_RCC_GetPCLK1Freq>
 8003a12:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009a      	lsls	r2, r3, #2
 8003a1e:	441a      	add	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	4a23      	ldr	r2, [pc, #140]	; (8003ab8 <UART_SetConfig+0x1b0>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	0119      	lsls	r1, r3, #4
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009a      	lsls	r2, r3, #2
 8003a3e:	441a      	add	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <UART_SetConfig+0x1b0>)
 8003a4c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	2064      	movs	r0, #100	; 0x64
 8003a54:	fb00 f303 	mul.w	r3, r0, r3
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	3332      	adds	r3, #50	; 0x32
 8003a5e:	4a16      	ldr	r2, [pc, #88]	; (8003ab8 <UART_SetConfig+0x1b0>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a6a:	4419      	add	r1, r3
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	009a      	lsls	r2, r3, #2
 8003a76:	441a      	add	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <UART_SetConfig+0x1b0>)
 8003a84:	fba3 0302 	umull	r0, r3, r3, r2
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	2064      	movs	r0, #100	; 0x64
 8003a8c:	fb00 f303 	mul.w	r3, r0, r3
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	3332      	adds	r3, #50	; 0x32
 8003a96:	4a08      	ldr	r2, [pc, #32]	; (8003ab8 <UART_SetConfig+0x1b0>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	f003 020f 	and.w	r2, r3, #15
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	440a      	add	r2, r1
 8003aa8:	609a      	str	r2, [r3, #8]
}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40013800 	.word	0x40013800
 8003ab8:	51eb851f 	.word	0x51eb851f

08003abc <__errno>:
 8003abc:	4b01      	ldr	r3, [pc, #4]	; (8003ac4 <__errno+0x8>)
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	2000000c 	.word	0x2000000c

08003ac8 <__libc_init_array>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	2500      	movs	r5, #0
 8003acc:	4e0c      	ldr	r6, [pc, #48]	; (8003b00 <__libc_init_array+0x38>)
 8003ace:	4c0d      	ldr	r4, [pc, #52]	; (8003b04 <__libc_init_array+0x3c>)
 8003ad0:	1ba4      	subs	r4, r4, r6
 8003ad2:	10a4      	asrs	r4, r4, #2
 8003ad4:	42a5      	cmp	r5, r4
 8003ad6:	d109      	bne.n	8003aec <__libc_init_array+0x24>
 8003ad8:	f000 fc34 	bl	8004344 <_init>
 8003adc:	2500      	movs	r5, #0
 8003ade:	4e0a      	ldr	r6, [pc, #40]	; (8003b08 <__libc_init_array+0x40>)
 8003ae0:	4c0a      	ldr	r4, [pc, #40]	; (8003b0c <__libc_init_array+0x44>)
 8003ae2:	1ba4      	subs	r4, r4, r6
 8003ae4:	10a4      	asrs	r4, r4, #2
 8003ae6:	42a5      	cmp	r5, r4
 8003ae8:	d105      	bne.n	8003af6 <__libc_init_array+0x2e>
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003af0:	4798      	blx	r3
 8003af2:	3501      	adds	r5, #1
 8003af4:	e7ee      	b.n	8003ad4 <__libc_init_array+0xc>
 8003af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003afa:	4798      	blx	r3
 8003afc:	3501      	adds	r5, #1
 8003afe:	e7f2      	b.n	8003ae6 <__libc_init_array+0x1e>
 8003b00:	08004544 	.word	0x08004544
 8003b04:	08004544 	.word	0x08004544
 8003b08:	08004544 	.word	0x08004544
 8003b0c:	08004548 	.word	0x08004548

08003b10 <memset>:
 8003b10:	4603      	mov	r3, r0
 8003b12:	4402      	add	r2, r0
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d100      	bne.n	8003b1a <memset+0xa>
 8003b18:	4770      	bx	lr
 8003b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1e:	e7f9      	b.n	8003b14 <memset+0x4>

08003b20 <siprintf>:
 8003b20:	b40e      	push	{r1, r2, r3}
 8003b22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b26:	b500      	push	{lr}
 8003b28:	b09c      	sub	sp, #112	; 0x70
 8003b2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b2c:	9002      	str	r0, [sp, #8]
 8003b2e:	9006      	str	r0, [sp, #24]
 8003b30:	9107      	str	r1, [sp, #28]
 8003b32:	9104      	str	r1, [sp, #16]
 8003b34:	4808      	ldr	r0, [pc, #32]	; (8003b58 <siprintf+0x38>)
 8003b36:	4909      	ldr	r1, [pc, #36]	; (8003b5c <siprintf+0x3c>)
 8003b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b3c:	9105      	str	r1, [sp, #20]
 8003b3e:	6800      	ldr	r0, [r0, #0]
 8003b40:	a902      	add	r1, sp, #8
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	f000 f866 	bl	8003c14 <_svfiprintf_r>
 8003b48:	2200      	movs	r2, #0
 8003b4a:	9b02      	ldr	r3, [sp, #8]
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	b01c      	add	sp, #112	; 0x70
 8003b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b54:	b003      	add	sp, #12
 8003b56:	4770      	bx	lr
 8003b58:	2000000c 	.word	0x2000000c
 8003b5c:	ffff0208 	.word	0xffff0208

08003b60 <__ssputs_r>:
 8003b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b64:	688e      	ldr	r6, [r1, #8]
 8003b66:	4682      	mov	sl, r0
 8003b68:	429e      	cmp	r6, r3
 8003b6a:	460c      	mov	r4, r1
 8003b6c:	4690      	mov	r8, r2
 8003b6e:	4699      	mov	r9, r3
 8003b70:	d837      	bhi.n	8003be2 <__ssputs_r+0x82>
 8003b72:	898a      	ldrh	r2, [r1, #12]
 8003b74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b78:	d031      	beq.n	8003bde <__ssputs_r+0x7e>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	6825      	ldr	r5, [r4, #0]
 8003b7e:	6909      	ldr	r1, [r1, #16]
 8003b80:	1a6f      	subs	r7, r5, r1
 8003b82:	6965      	ldr	r5, [r4, #20]
 8003b84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b88:	fb95 f5f3 	sdiv	r5, r5, r3
 8003b8c:	f109 0301 	add.w	r3, r9, #1
 8003b90:	443b      	add	r3, r7
 8003b92:	429d      	cmp	r5, r3
 8003b94:	bf38      	it	cc
 8003b96:	461d      	movcc	r5, r3
 8003b98:	0553      	lsls	r3, r2, #21
 8003b9a:	d530      	bpl.n	8003bfe <__ssputs_r+0x9e>
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	f000 fb37 	bl	8004210 <_malloc_r>
 8003ba2:	4606      	mov	r6, r0
 8003ba4:	b950      	cbnz	r0, 8003bbc <__ssputs_r+0x5c>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bac:	f8ca 3000 	str.w	r3, [sl]
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bb6:	81a3      	strh	r3, [r4, #12]
 8003bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bbc:	463a      	mov	r2, r7
 8003bbe:	6921      	ldr	r1, [r4, #16]
 8003bc0:	f000 fab6 	bl	8004130 <memcpy>
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bce:	81a3      	strh	r3, [r4, #12]
 8003bd0:	6126      	str	r6, [r4, #16]
 8003bd2:	443e      	add	r6, r7
 8003bd4:	6026      	str	r6, [r4, #0]
 8003bd6:	464e      	mov	r6, r9
 8003bd8:	6165      	str	r5, [r4, #20]
 8003bda:	1bed      	subs	r5, r5, r7
 8003bdc:	60a5      	str	r5, [r4, #8]
 8003bde:	454e      	cmp	r6, r9
 8003be0:	d900      	bls.n	8003be4 <__ssputs_r+0x84>
 8003be2:	464e      	mov	r6, r9
 8003be4:	4632      	mov	r2, r6
 8003be6:	4641      	mov	r1, r8
 8003be8:	6820      	ldr	r0, [r4, #0]
 8003bea:	f000 faac 	bl	8004146 <memmove>
 8003bee:	68a3      	ldr	r3, [r4, #8]
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	1b9b      	subs	r3, r3, r6
 8003bf4:	60a3      	str	r3, [r4, #8]
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	441e      	add	r6, r3
 8003bfa:	6026      	str	r6, [r4, #0]
 8003bfc:	e7dc      	b.n	8003bb8 <__ssputs_r+0x58>
 8003bfe:	462a      	mov	r2, r5
 8003c00:	f000 fb60 	bl	80042c4 <_realloc_r>
 8003c04:	4606      	mov	r6, r0
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d1e2      	bne.n	8003bd0 <__ssputs_r+0x70>
 8003c0a:	6921      	ldr	r1, [r4, #16]
 8003c0c:	4650      	mov	r0, sl
 8003c0e:	f000 fab3 	bl	8004178 <_free_r>
 8003c12:	e7c8      	b.n	8003ba6 <__ssputs_r+0x46>

08003c14 <_svfiprintf_r>:
 8003c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c18:	461d      	mov	r5, r3
 8003c1a:	898b      	ldrh	r3, [r1, #12]
 8003c1c:	b09d      	sub	sp, #116	; 0x74
 8003c1e:	061f      	lsls	r7, r3, #24
 8003c20:	4680      	mov	r8, r0
 8003c22:	460c      	mov	r4, r1
 8003c24:	4616      	mov	r6, r2
 8003c26:	d50f      	bpl.n	8003c48 <_svfiprintf_r+0x34>
 8003c28:	690b      	ldr	r3, [r1, #16]
 8003c2a:	b96b      	cbnz	r3, 8003c48 <_svfiprintf_r+0x34>
 8003c2c:	2140      	movs	r1, #64	; 0x40
 8003c2e:	f000 faef 	bl	8004210 <_malloc_r>
 8003c32:	6020      	str	r0, [r4, #0]
 8003c34:	6120      	str	r0, [r4, #16]
 8003c36:	b928      	cbnz	r0, 8003c44 <_svfiprintf_r+0x30>
 8003c38:	230c      	movs	r3, #12
 8003c3a:	f8c8 3000 	str.w	r3, [r8]
 8003c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c42:	e0c8      	b.n	8003dd6 <_svfiprintf_r+0x1c2>
 8003c44:	2340      	movs	r3, #64	; 0x40
 8003c46:	6163      	str	r3, [r4, #20]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c52:	2330      	movs	r3, #48	; 0x30
 8003c54:	f04f 0b01 	mov.w	fp, #1
 8003c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c5c:	9503      	str	r5, [sp, #12]
 8003c5e:	4637      	mov	r7, r6
 8003c60:	463d      	mov	r5, r7
 8003c62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c66:	b10b      	cbz	r3, 8003c6c <_svfiprintf_r+0x58>
 8003c68:	2b25      	cmp	r3, #37	; 0x25
 8003c6a:	d13e      	bne.n	8003cea <_svfiprintf_r+0xd6>
 8003c6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003c70:	d00b      	beq.n	8003c8a <_svfiprintf_r+0x76>
 8003c72:	4653      	mov	r3, sl
 8003c74:	4632      	mov	r2, r6
 8003c76:	4621      	mov	r1, r4
 8003c78:	4640      	mov	r0, r8
 8003c7a:	f7ff ff71 	bl	8003b60 <__ssputs_r>
 8003c7e:	3001      	adds	r0, #1
 8003c80:	f000 80a4 	beq.w	8003dcc <_svfiprintf_r+0x1b8>
 8003c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c86:	4453      	add	r3, sl
 8003c88:	9309      	str	r3, [sp, #36]	; 0x24
 8003c8a:	783b      	ldrb	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 809d 	beq.w	8003dcc <_svfiprintf_r+0x1b8>
 8003c92:	2300      	movs	r3, #0
 8003c94:	f04f 32ff 	mov.w	r2, #4294967295
 8003c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c9c:	9304      	str	r3, [sp, #16]
 8003c9e:	9307      	str	r3, [sp, #28]
 8003ca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ca4:	931a      	str	r3, [sp, #104]	; 0x68
 8003ca6:	462f      	mov	r7, r5
 8003ca8:	2205      	movs	r2, #5
 8003caa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003cae:	4850      	ldr	r0, [pc, #320]	; (8003df0 <_svfiprintf_r+0x1dc>)
 8003cb0:	f000 fa30 	bl	8004114 <memchr>
 8003cb4:	9b04      	ldr	r3, [sp, #16]
 8003cb6:	b9d0      	cbnz	r0, 8003cee <_svfiprintf_r+0xda>
 8003cb8:	06d9      	lsls	r1, r3, #27
 8003cba:	bf44      	itt	mi
 8003cbc:	2220      	movmi	r2, #32
 8003cbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cc2:	071a      	lsls	r2, r3, #28
 8003cc4:	bf44      	itt	mi
 8003cc6:	222b      	movmi	r2, #43	; 0x2b
 8003cc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ccc:	782a      	ldrb	r2, [r5, #0]
 8003cce:	2a2a      	cmp	r2, #42	; 0x2a
 8003cd0:	d015      	beq.n	8003cfe <_svfiprintf_r+0xea>
 8003cd2:	462f      	mov	r7, r5
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	250a      	movs	r5, #10
 8003cd8:	9a07      	ldr	r2, [sp, #28]
 8003cda:	4639      	mov	r1, r7
 8003cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ce0:	3b30      	subs	r3, #48	; 0x30
 8003ce2:	2b09      	cmp	r3, #9
 8003ce4:	d94d      	bls.n	8003d82 <_svfiprintf_r+0x16e>
 8003ce6:	b1b8      	cbz	r0, 8003d18 <_svfiprintf_r+0x104>
 8003ce8:	e00f      	b.n	8003d0a <_svfiprintf_r+0xf6>
 8003cea:	462f      	mov	r7, r5
 8003cec:	e7b8      	b.n	8003c60 <_svfiprintf_r+0x4c>
 8003cee:	4a40      	ldr	r2, [pc, #256]	; (8003df0 <_svfiprintf_r+0x1dc>)
 8003cf0:	463d      	mov	r5, r7
 8003cf2:	1a80      	subs	r0, r0, r2
 8003cf4:	fa0b f000 	lsl.w	r0, fp, r0
 8003cf8:	4318      	orrs	r0, r3
 8003cfa:	9004      	str	r0, [sp, #16]
 8003cfc:	e7d3      	b.n	8003ca6 <_svfiprintf_r+0x92>
 8003cfe:	9a03      	ldr	r2, [sp, #12]
 8003d00:	1d11      	adds	r1, r2, #4
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	9103      	str	r1, [sp, #12]
 8003d06:	2a00      	cmp	r2, #0
 8003d08:	db01      	blt.n	8003d0e <_svfiprintf_r+0xfa>
 8003d0a:	9207      	str	r2, [sp, #28]
 8003d0c:	e004      	b.n	8003d18 <_svfiprintf_r+0x104>
 8003d0e:	4252      	negs	r2, r2
 8003d10:	f043 0302 	orr.w	r3, r3, #2
 8003d14:	9207      	str	r2, [sp, #28]
 8003d16:	9304      	str	r3, [sp, #16]
 8003d18:	783b      	ldrb	r3, [r7, #0]
 8003d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8003d1c:	d10c      	bne.n	8003d38 <_svfiprintf_r+0x124>
 8003d1e:	787b      	ldrb	r3, [r7, #1]
 8003d20:	2b2a      	cmp	r3, #42	; 0x2a
 8003d22:	d133      	bne.n	8003d8c <_svfiprintf_r+0x178>
 8003d24:	9b03      	ldr	r3, [sp, #12]
 8003d26:	3702      	adds	r7, #2
 8003d28:	1d1a      	adds	r2, r3, #4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	9203      	str	r2, [sp, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bfb8      	it	lt
 8003d32:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d36:	9305      	str	r3, [sp, #20]
 8003d38:	4d2e      	ldr	r5, [pc, #184]	; (8003df4 <_svfiprintf_r+0x1e0>)
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	7839      	ldrb	r1, [r7, #0]
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f000 f9e8 	bl	8004114 <memchr>
 8003d44:	b138      	cbz	r0, 8003d56 <_svfiprintf_r+0x142>
 8003d46:	2340      	movs	r3, #64	; 0x40
 8003d48:	1b40      	subs	r0, r0, r5
 8003d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8003d4e:	9b04      	ldr	r3, [sp, #16]
 8003d50:	3701      	adds	r7, #1
 8003d52:	4303      	orrs	r3, r0
 8003d54:	9304      	str	r3, [sp, #16]
 8003d56:	7839      	ldrb	r1, [r7, #0]
 8003d58:	2206      	movs	r2, #6
 8003d5a:	4827      	ldr	r0, [pc, #156]	; (8003df8 <_svfiprintf_r+0x1e4>)
 8003d5c:	1c7e      	adds	r6, r7, #1
 8003d5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d62:	f000 f9d7 	bl	8004114 <memchr>
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d038      	beq.n	8003ddc <_svfiprintf_r+0x1c8>
 8003d6a:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <_svfiprintf_r+0x1e8>)
 8003d6c:	bb13      	cbnz	r3, 8003db4 <_svfiprintf_r+0x1a0>
 8003d6e:	9b03      	ldr	r3, [sp, #12]
 8003d70:	3307      	adds	r3, #7
 8003d72:	f023 0307 	bic.w	r3, r3, #7
 8003d76:	3308      	adds	r3, #8
 8003d78:	9303      	str	r3, [sp, #12]
 8003d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d7c:	444b      	add	r3, r9
 8003d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d80:	e76d      	b.n	8003c5e <_svfiprintf_r+0x4a>
 8003d82:	fb05 3202 	mla	r2, r5, r2, r3
 8003d86:	2001      	movs	r0, #1
 8003d88:	460f      	mov	r7, r1
 8003d8a:	e7a6      	b.n	8003cda <_svfiprintf_r+0xc6>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	250a      	movs	r5, #10
 8003d90:	4619      	mov	r1, r3
 8003d92:	3701      	adds	r7, #1
 8003d94:	9305      	str	r3, [sp, #20]
 8003d96:	4638      	mov	r0, r7
 8003d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d9c:	3a30      	subs	r2, #48	; 0x30
 8003d9e:	2a09      	cmp	r2, #9
 8003da0:	d903      	bls.n	8003daa <_svfiprintf_r+0x196>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0c8      	beq.n	8003d38 <_svfiprintf_r+0x124>
 8003da6:	9105      	str	r1, [sp, #20]
 8003da8:	e7c6      	b.n	8003d38 <_svfiprintf_r+0x124>
 8003daa:	fb05 2101 	mla	r1, r5, r1, r2
 8003dae:	2301      	movs	r3, #1
 8003db0:	4607      	mov	r7, r0
 8003db2:	e7f0      	b.n	8003d96 <_svfiprintf_r+0x182>
 8003db4:	ab03      	add	r3, sp, #12
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	4622      	mov	r2, r4
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <_svfiprintf_r+0x1ec>)
 8003dbc:	a904      	add	r1, sp, #16
 8003dbe:	4640      	mov	r0, r8
 8003dc0:	f3af 8000 	nop.w
 8003dc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003dc8:	4681      	mov	r9, r0
 8003dca:	d1d6      	bne.n	8003d7a <_svfiprintf_r+0x166>
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	065b      	lsls	r3, r3, #25
 8003dd0:	f53f af35 	bmi.w	8003c3e <_svfiprintf_r+0x2a>
 8003dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dd6:	b01d      	add	sp, #116	; 0x74
 8003dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ddc:	ab03      	add	r3, sp, #12
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	4622      	mov	r2, r4
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <_svfiprintf_r+0x1ec>)
 8003de4:	a904      	add	r1, sp, #16
 8003de6:	4640      	mov	r0, r8
 8003de8:	f000 f882 	bl	8003ef0 <_printf_i>
 8003dec:	e7ea      	b.n	8003dc4 <_svfiprintf_r+0x1b0>
 8003dee:	bf00      	nop
 8003df0:	08004510 	.word	0x08004510
 8003df4:	08004516 	.word	0x08004516
 8003df8:	0800451a 	.word	0x0800451a
 8003dfc:	00000000 	.word	0x00000000
 8003e00:	08003b61 	.word	0x08003b61

08003e04 <_printf_common>:
 8003e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e08:	4691      	mov	r9, r2
 8003e0a:	461f      	mov	r7, r3
 8003e0c:	688a      	ldr	r2, [r1, #8]
 8003e0e:	690b      	ldr	r3, [r1, #16]
 8003e10:	4606      	mov	r6, r0
 8003e12:	4293      	cmp	r3, r2
 8003e14:	bfb8      	it	lt
 8003e16:	4613      	movlt	r3, r2
 8003e18:	f8c9 3000 	str.w	r3, [r9]
 8003e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e20:	460c      	mov	r4, r1
 8003e22:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e26:	b112      	cbz	r2, 8003e2e <_printf_common+0x2a>
 8003e28:	3301      	adds	r3, #1
 8003e2a:	f8c9 3000 	str.w	r3, [r9]
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	0699      	lsls	r1, r3, #26
 8003e32:	bf42      	ittt	mi
 8003e34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e38:	3302      	addmi	r3, #2
 8003e3a:	f8c9 3000 	strmi.w	r3, [r9]
 8003e3e:	6825      	ldr	r5, [r4, #0]
 8003e40:	f015 0506 	ands.w	r5, r5, #6
 8003e44:	d107      	bne.n	8003e56 <_printf_common+0x52>
 8003e46:	f104 0a19 	add.w	sl, r4, #25
 8003e4a:	68e3      	ldr	r3, [r4, #12]
 8003e4c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	42ab      	cmp	r3, r5
 8003e54:	dc29      	bgt.n	8003eaa <_printf_common+0xa6>
 8003e56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e5a:	6822      	ldr	r2, [r4, #0]
 8003e5c:	3300      	adds	r3, #0
 8003e5e:	bf18      	it	ne
 8003e60:	2301      	movne	r3, #1
 8003e62:	0692      	lsls	r2, r2, #26
 8003e64:	d42e      	bmi.n	8003ec4 <_printf_common+0xc0>
 8003e66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e6a:	4639      	mov	r1, r7
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	47c0      	blx	r8
 8003e70:	3001      	adds	r0, #1
 8003e72:	d021      	beq.n	8003eb8 <_printf_common+0xb4>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	68e5      	ldr	r5, [r4, #12]
 8003e78:	f003 0306 	and.w	r3, r3, #6
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	bf18      	it	ne
 8003e80:	2500      	movne	r5, #0
 8003e82:	f8d9 2000 	ldr.w	r2, [r9]
 8003e86:	f04f 0900 	mov.w	r9, #0
 8003e8a:	bf08      	it	eq
 8003e8c:	1aad      	subeq	r5, r5, r2
 8003e8e:	68a3      	ldr	r3, [r4, #8]
 8003e90:	6922      	ldr	r2, [r4, #16]
 8003e92:	bf08      	it	eq
 8003e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bfc4      	itt	gt
 8003e9c:	1a9b      	subgt	r3, r3, r2
 8003e9e:	18ed      	addgt	r5, r5, r3
 8003ea0:	341a      	adds	r4, #26
 8003ea2:	454d      	cmp	r5, r9
 8003ea4:	d11a      	bne.n	8003edc <_printf_common+0xd8>
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	e008      	b.n	8003ebc <_printf_common+0xb8>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4652      	mov	r2, sl
 8003eae:	4639      	mov	r1, r7
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	47c0      	blx	r8
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d103      	bne.n	8003ec0 <_printf_common+0xbc>
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec0:	3501      	adds	r5, #1
 8003ec2:	e7c2      	b.n	8003e4a <_printf_common+0x46>
 8003ec4:	2030      	movs	r0, #48	; 0x30
 8003ec6:	18e1      	adds	r1, r4, r3
 8003ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ed2:	4422      	add	r2, r4
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003eda:	e7c4      	b.n	8003e66 <_printf_common+0x62>
 8003edc:	2301      	movs	r3, #1
 8003ede:	4622      	mov	r2, r4
 8003ee0:	4639      	mov	r1, r7
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	47c0      	blx	r8
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	d0e6      	beq.n	8003eb8 <_printf_common+0xb4>
 8003eea:	f109 0901 	add.w	r9, r9, #1
 8003eee:	e7d8      	b.n	8003ea2 <_printf_common+0x9e>

08003ef0 <_printf_i>:
 8003ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ef4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ef8:	460c      	mov	r4, r1
 8003efa:	7e09      	ldrb	r1, [r1, #24]
 8003efc:	b085      	sub	sp, #20
 8003efe:	296e      	cmp	r1, #110	; 0x6e
 8003f00:	4617      	mov	r7, r2
 8003f02:	4606      	mov	r6, r0
 8003f04:	4698      	mov	r8, r3
 8003f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f08:	f000 80b3 	beq.w	8004072 <_printf_i+0x182>
 8003f0c:	d822      	bhi.n	8003f54 <_printf_i+0x64>
 8003f0e:	2963      	cmp	r1, #99	; 0x63
 8003f10:	d036      	beq.n	8003f80 <_printf_i+0x90>
 8003f12:	d80a      	bhi.n	8003f2a <_printf_i+0x3a>
 8003f14:	2900      	cmp	r1, #0
 8003f16:	f000 80b9 	beq.w	800408c <_printf_i+0x19c>
 8003f1a:	2958      	cmp	r1, #88	; 0x58
 8003f1c:	f000 8083 	beq.w	8004026 <_printf_i+0x136>
 8003f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f28:	e032      	b.n	8003f90 <_printf_i+0xa0>
 8003f2a:	2964      	cmp	r1, #100	; 0x64
 8003f2c:	d001      	beq.n	8003f32 <_printf_i+0x42>
 8003f2e:	2969      	cmp	r1, #105	; 0x69
 8003f30:	d1f6      	bne.n	8003f20 <_printf_i+0x30>
 8003f32:	6820      	ldr	r0, [r4, #0]
 8003f34:	6813      	ldr	r3, [r2, #0]
 8003f36:	0605      	lsls	r5, r0, #24
 8003f38:	f103 0104 	add.w	r1, r3, #4
 8003f3c:	d52a      	bpl.n	8003f94 <_printf_i+0xa4>
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6011      	str	r1, [r2, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	da03      	bge.n	8003f4e <_printf_i+0x5e>
 8003f46:	222d      	movs	r2, #45	; 0x2d
 8003f48:	425b      	negs	r3, r3
 8003f4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f4e:	486f      	ldr	r0, [pc, #444]	; (800410c <_printf_i+0x21c>)
 8003f50:	220a      	movs	r2, #10
 8003f52:	e039      	b.n	8003fc8 <_printf_i+0xd8>
 8003f54:	2973      	cmp	r1, #115	; 0x73
 8003f56:	f000 809d 	beq.w	8004094 <_printf_i+0x1a4>
 8003f5a:	d808      	bhi.n	8003f6e <_printf_i+0x7e>
 8003f5c:	296f      	cmp	r1, #111	; 0x6f
 8003f5e:	d020      	beq.n	8003fa2 <_printf_i+0xb2>
 8003f60:	2970      	cmp	r1, #112	; 0x70
 8003f62:	d1dd      	bne.n	8003f20 <_printf_i+0x30>
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	f043 0320 	orr.w	r3, r3, #32
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	e003      	b.n	8003f76 <_printf_i+0x86>
 8003f6e:	2975      	cmp	r1, #117	; 0x75
 8003f70:	d017      	beq.n	8003fa2 <_printf_i+0xb2>
 8003f72:	2978      	cmp	r1, #120	; 0x78
 8003f74:	d1d4      	bne.n	8003f20 <_printf_i+0x30>
 8003f76:	2378      	movs	r3, #120	; 0x78
 8003f78:	4865      	ldr	r0, [pc, #404]	; (8004110 <_printf_i+0x220>)
 8003f7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f7e:	e055      	b.n	800402c <_printf_i+0x13c>
 8003f80:	6813      	ldr	r3, [r2, #0]
 8003f82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f86:	1d19      	adds	r1, r3, #4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6011      	str	r1, [r2, #0]
 8003f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f90:	2301      	movs	r3, #1
 8003f92:	e08c      	b.n	80040ae <_printf_i+0x1be>
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f9a:	6011      	str	r1, [r2, #0]
 8003f9c:	bf18      	it	ne
 8003f9e:	b21b      	sxthne	r3, r3
 8003fa0:	e7cf      	b.n	8003f42 <_printf_i+0x52>
 8003fa2:	6813      	ldr	r3, [r2, #0]
 8003fa4:	6825      	ldr	r5, [r4, #0]
 8003fa6:	1d18      	adds	r0, r3, #4
 8003fa8:	6010      	str	r0, [r2, #0]
 8003faa:	0628      	lsls	r0, r5, #24
 8003fac:	d501      	bpl.n	8003fb2 <_printf_i+0xc2>
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	e002      	b.n	8003fb8 <_printf_i+0xc8>
 8003fb2:	0668      	lsls	r0, r5, #25
 8003fb4:	d5fb      	bpl.n	8003fae <_printf_i+0xbe>
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	296f      	cmp	r1, #111	; 0x6f
 8003fba:	bf14      	ite	ne
 8003fbc:	220a      	movne	r2, #10
 8003fbe:	2208      	moveq	r2, #8
 8003fc0:	4852      	ldr	r0, [pc, #328]	; (800410c <_printf_i+0x21c>)
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fc8:	6865      	ldr	r5, [r4, #4]
 8003fca:	2d00      	cmp	r5, #0
 8003fcc:	60a5      	str	r5, [r4, #8]
 8003fce:	f2c0 8095 	blt.w	80040fc <_printf_i+0x20c>
 8003fd2:	6821      	ldr	r1, [r4, #0]
 8003fd4:	f021 0104 	bic.w	r1, r1, #4
 8003fd8:	6021      	str	r1, [r4, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d13d      	bne.n	800405a <_printf_i+0x16a>
 8003fde:	2d00      	cmp	r5, #0
 8003fe0:	f040 808e 	bne.w	8004100 <_printf_i+0x210>
 8003fe4:	4665      	mov	r5, ip
 8003fe6:	2a08      	cmp	r2, #8
 8003fe8:	d10b      	bne.n	8004002 <_printf_i+0x112>
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	07db      	lsls	r3, r3, #31
 8003fee:	d508      	bpl.n	8004002 <_printf_i+0x112>
 8003ff0:	6923      	ldr	r3, [r4, #16]
 8003ff2:	6862      	ldr	r2, [r4, #4]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	bfde      	ittt	le
 8003ff8:	2330      	movle	r3, #48	; 0x30
 8003ffa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ffe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004002:	ebac 0305 	sub.w	r3, ip, r5
 8004006:	6123      	str	r3, [r4, #16]
 8004008:	f8cd 8000 	str.w	r8, [sp]
 800400c:	463b      	mov	r3, r7
 800400e:	aa03      	add	r2, sp, #12
 8004010:	4621      	mov	r1, r4
 8004012:	4630      	mov	r0, r6
 8004014:	f7ff fef6 	bl	8003e04 <_printf_common>
 8004018:	3001      	adds	r0, #1
 800401a:	d14d      	bne.n	80040b8 <_printf_i+0x1c8>
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	b005      	add	sp, #20
 8004022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004026:	4839      	ldr	r0, [pc, #228]	; (800410c <_printf_i+0x21c>)
 8004028:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800402c:	6813      	ldr	r3, [r2, #0]
 800402e:	6821      	ldr	r1, [r4, #0]
 8004030:	1d1d      	adds	r5, r3, #4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6015      	str	r5, [r2, #0]
 8004036:	060a      	lsls	r2, r1, #24
 8004038:	d50b      	bpl.n	8004052 <_printf_i+0x162>
 800403a:	07ca      	lsls	r2, r1, #31
 800403c:	bf44      	itt	mi
 800403e:	f041 0120 	orrmi.w	r1, r1, #32
 8004042:	6021      	strmi	r1, [r4, #0]
 8004044:	b91b      	cbnz	r3, 800404e <_printf_i+0x15e>
 8004046:	6822      	ldr	r2, [r4, #0]
 8004048:	f022 0220 	bic.w	r2, r2, #32
 800404c:	6022      	str	r2, [r4, #0]
 800404e:	2210      	movs	r2, #16
 8004050:	e7b7      	b.n	8003fc2 <_printf_i+0xd2>
 8004052:	064d      	lsls	r5, r1, #25
 8004054:	bf48      	it	mi
 8004056:	b29b      	uxthmi	r3, r3
 8004058:	e7ef      	b.n	800403a <_printf_i+0x14a>
 800405a:	4665      	mov	r5, ip
 800405c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004060:	fb02 3311 	mls	r3, r2, r1, r3
 8004064:	5cc3      	ldrb	r3, [r0, r3]
 8004066:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800406a:	460b      	mov	r3, r1
 800406c:	2900      	cmp	r1, #0
 800406e:	d1f5      	bne.n	800405c <_printf_i+0x16c>
 8004070:	e7b9      	b.n	8003fe6 <_printf_i+0xf6>
 8004072:	6813      	ldr	r3, [r2, #0]
 8004074:	6825      	ldr	r5, [r4, #0]
 8004076:	1d18      	adds	r0, r3, #4
 8004078:	6961      	ldr	r1, [r4, #20]
 800407a:	6010      	str	r0, [r2, #0]
 800407c:	0628      	lsls	r0, r5, #24
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	d501      	bpl.n	8004086 <_printf_i+0x196>
 8004082:	6019      	str	r1, [r3, #0]
 8004084:	e002      	b.n	800408c <_printf_i+0x19c>
 8004086:	066a      	lsls	r2, r5, #25
 8004088:	d5fb      	bpl.n	8004082 <_printf_i+0x192>
 800408a:	8019      	strh	r1, [r3, #0]
 800408c:	2300      	movs	r3, #0
 800408e:	4665      	mov	r5, ip
 8004090:	6123      	str	r3, [r4, #16]
 8004092:	e7b9      	b.n	8004008 <_printf_i+0x118>
 8004094:	6813      	ldr	r3, [r2, #0]
 8004096:	1d19      	adds	r1, r3, #4
 8004098:	6011      	str	r1, [r2, #0]
 800409a:	681d      	ldr	r5, [r3, #0]
 800409c:	6862      	ldr	r2, [r4, #4]
 800409e:	2100      	movs	r1, #0
 80040a0:	4628      	mov	r0, r5
 80040a2:	f000 f837 	bl	8004114 <memchr>
 80040a6:	b108      	cbz	r0, 80040ac <_printf_i+0x1bc>
 80040a8:	1b40      	subs	r0, r0, r5
 80040aa:	6060      	str	r0, [r4, #4]
 80040ac:	6863      	ldr	r3, [r4, #4]
 80040ae:	6123      	str	r3, [r4, #16]
 80040b0:	2300      	movs	r3, #0
 80040b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040b6:	e7a7      	b.n	8004008 <_printf_i+0x118>
 80040b8:	6923      	ldr	r3, [r4, #16]
 80040ba:	462a      	mov	r2, r5
 80040bc:	4639      	mov	r1, r7
 80040be:	4630      	mov	r0, r6
 80040c0:	47c0      	blx	r8
 80040c2:	3001      	adds	r0, #1
 80040c4:	d0aa      	beq.n	800401c <_printf_i+0x12c>
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	079b      	lsls	r3, r3, #30
 80040ca:	d413      	bmi.n	80040f4 <_printf_i+0x204>
 80040cc:	68e0      	ldr	r0, [r4, #12]
 80040ce:	9b03      	ldr	r3, [sp, #12]
 80040d0:	4298      	cmp	r0, r3
 80040d2:	bfb8      	it	lt
 80040d4:	4618      	movlt	r0, r3
 80040d6:	e7a3      	b.n	8004020 <_printf_i+0x130>
 80040d8:	2301      	movs	r3, #1
 80040da:	464a      	mov	r2, r9
 80040dc:	4639      	mov	r1, r7
 80040de:	4630      	mov	r0, r6
 80040e0:	47c0      	blx	r8
 80040e2:	3001      	adds	r0, #1
 80040e4:	d09a      	beq.n	800401c <_printf_i+0x12c>
 80040e6:	3501      	adds	r5, #1
 80040e8:	68e3      	ldr	r3, [r4, #12]
 80040ea:	9a03      	ldr	r2, [sp, #12]
 80040ec:	1a9b      	subs	r3, r3, r2
 80040ee:	42ab      	cmp	r3, r5
 80040f0:	dcf2      	bgt.n	80040d8 <_printf_i+0x1e8>
 80040f2:	e7eb      	b.n	80040cc <_printf_i+0x1dc>
 80040f4:	2500      	movs	r5, #0
 80040f6:	f104 0919 	add.w	r9, r4, #25
 80040fa:	e7f5      	b.n	80040e8 <_printf_i+0x1f8>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ac      	bne.n	800405a <_printf_i+0x16a>
 8004100:	7803      	ldrb	r3, [r0, #0]
 8004102:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004106:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800410a:	e76c      	b.n	8003fe6 <_printf_i+0xf6>
 800410c:	08004521 	.word	0x08004521
 8004110:	08004532 	.word	0x08004532

08004114 <memchr>:
 8004114:	b510      	push	{r4, lr}
 8004116:	b2c9      	uxtb	r1, r1
 8004118:	4402      	add	r2, r0
 800411a:	4290      	cmp	r0, r2
 800411c:	4603      	mov	r3, r0
 800411e:	d101      	bne.n	8004124 <memchr+0x10>
 8004120:	2300      	movs	r3, #0
 8004122:	e003      	b.n	800412c <memchr+0x18>
 8004124:	781c      	ldrb	r4, [r3, #0]
 8004126:	3001      	adds	r0, #1
 8004128:	428c      	cmp	r4, r1
 800412a:	d1f6      	bne.n	800411a <memchr+0x6>
 800412c:	4618      	mov	r0, r3
 800412e:	bd10      	pop	{r4, pc}

08004130 <memcpy>:
 8004130:	b510      	push	{r4, lr}
 8004132:	1e43      	subs	r3, r0, #1
 8004134:	440a      	add	r2, r1
 8004136:	4291      	cmp	r1, r2
 8004138:	d100      	bne.n	800413c <memcpy+0xc>
 800413a:	bd10      	pop	{r4, pc}
 800413c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004140:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004144:	e7f7      	b.n	8004136 <memcpy+0x6>

08004146 <memmove>:
 8004146:	4288      	cmp	r0, r1
 8004148:	b510      	push	{r4, lr}
 800414a:	eb01 0302 	add.w	r3, r1, r2
 800414e:	d807      	bhi.n	8004160 <memmove+0x1a>
 8004150:	1e42      	subs	r2, r0, #1
 8004152:	4299      	cmp	r1, r3
 8004154:	d00a      	beq.n	800416c <memmove+0x26>
 8004156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800415a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800415e:	e7f8      	b.n	8004152 <memmove+0xc>
 8004160:	4283      	cmp	r3, r0
 8004162:	d9f5      	bls.n	8004150 <memmove+0xa>
 8004164:	1881      	adds	r1, r0, r2
 8004166:	1ad2      	subs	r2, r2, r3
 8004168:	42d3      	cmn	r3, r2
 800416a:	d100      	bne.n	800416e <memmove+0x28>
 800416c:	bd10      	pop	{r4, pc}
 800416e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004172:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004176:	e7f7      	b.n	8004168 <memmove+0x22>

08004178 <_free_r>:
 8004178:	b538      	push	{r3, r4, r5, lr}
 800417a:	4605      	mov	r5, r0
 800417c:	2900      	cmp	r1, #0
 800417e:	d043      	beq.n	8004208 <_free_r+0x90>
 8004180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004184:	1f0c      	subs	r4, r1, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	bfb8      	it	lt
 800418a:	18e4      	addlt	r4, r4, r3
 800418c:	f000 f8d0 	bl	8004330 <__malloc_lock>
 8004190:	4a1e      	ldr	r2, [pc, #120]	; (800420c <_free_r+0x94>)
 8004192:	6813      	ldr	r3, [r2, #0]
 8004194:	4610      	mov	r0, r2
 8004196:	b933      	cbnz	r3, 80041a6 <_free_r+0x2e>
 8004198:	6063      	str	r3, [r4, #4]
 800419a:	6014      	str	r4, [r2, #0]
 800419c:	4628      	mov	r0, r5
 800419e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041a2:	f000 b8c6 	b.w	8004332 <__malloc_unlock>
 80041a6:	42a3      	cmp	r3, r4
 80041a8:	d90b      	bls.n	80041c2 <_free_r+0x4a>
 80041aa:	6821      	ldr	r1, [r4, #0]
 80041ac:	1862      	adds	r2, r4, r1
 80041ae:	4293      	cmp	r3, r2
 80041b0:	bf01      	itttt	eq
 80041b2:	681a      	ldreq	r2, [r3, #0]
 80041b4:	685b      	ldreq	r3, [r3, #4]
 80041b6:	1852      	addeq	r2, r2, r1
 80041b8:	6022      	streq	r2, [r4, #0]
 80041ba:	6063      	str	r3, [r4, #4]
 80041bc:	6004      	str	r4, [r0, #0]
 80041be:	e7ed      	b.n	800419c <_free_r+0x24>
 80041c0:	4613      	mov	r3, r2
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	b10a      	cbz	r2, 80041ca <_free_r+0x52>
 80041c6:	42a2      	cmp	r2, r4
 80041c8:	d9fa      	bls.n	80041c0 <_free_r+0x48>
 80041ca:	6819      	ldr	r1, [r3, #0]
 80041cc:	1858      	adds	r0, r3, r1
 80041ce:	42a0      	cmp	r0, r4
 80041d0:	d10b      	bne.n	80041ea <_free_r+0x72>
 80041d2:	6820      	ldr	r0, [r4, #0]
 80041d4:	4401      	add	r1, r0
 80041d6:	1858      	adds	r0, r3, r1
 80041d8:	4282      	cmp	r2, r0
 80041da:	6019      	str	r1, [r3, #0]
 80041dc:	d1de      	bne.n	800419c <_free_r+0x24>
 80041de:	6810      	ldr	r0, [r2, #0]
 80041e0:	6852      	ldr	r2, [r2, #4]
 80041e2:	4401      	add	r1, r0
 80041e4:	6019      	str	r1, [r3, #0]
 80041e6:	605a      	str	r2, [r3, #4]
 80041e8:	e7d8      	b.n	800419c <_free_r+0x24>
 80041ea:	d902      	bls.n	80041f2 <_free_r+0x7a>
 80041ec:	230c      	movs	r3, #12
 80041ee:	602b      	str	r3, [r5, #0]
 80041f0:	e7d4      	b.n	800419c <_free_r+0x24>
 80041f2:	6820      	ldr	r0, [r4, #0]
 80041f4:	1821      	adds	r1, r4, r0
 80041f6:	428a      	cmp	r2, r1
 80041f8:	bf01      	itttt	eq
 80041fa:	6811      	ldreq	r1, [r2, #0]
 80041fc:	6852      	ldreq	r2, [r2, #4]
 80041fe:	1809      	addeq	r1, r1, r0
 8004200:	6021      	streq	r1, [r4, #0]
 8004202:	6062      	str	r2, [r4, #4]
 8004204:	605c      	str	r4, [r3, #4]
 8004206:	e7c9      	b.n	800419c <_free_r+0x24>
 8004208:	bd38      	pop	{r3, r4, r5, pc}
 800420a:	bf00      	nop
 800420c:	2000009c 	.word	0x2000009c

08004210 <_malloc_r>:
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	1ccd      	adds	r5, r1, #3
 8004214:	f025 0503 	bic.w	r5, r5, #3
 8004218:	3508      	adds	r5, #8
 800421a:	2d0c      	cmp	r5, #12
 800421c:	bf38      	it	cc
 800421e:	250c      	movcc	r5, #12
 8004220:	2d00      	cmp	r5, #0
 8004222:	4606      	mov	r6, r0
 8004224:	db01      	blt.n	800422a <_malloc_r+0x1a>
 8004226:	42a9      	cmp	r1, r5
 8004228:	d903      	bls.n	8004232 <_malloc_r+0x22>
 800422a:	230c      	movs	r3, #12
 800422c:	6033      	str	r3, [r6, #0]
 800422e:	2000      	movs	r0, #0
 8004230:	bd70      	pop	{r4, r5, r6, pc}
 8004232:	f000 f87d 	bl	8004330 <__malloc_lock>
 8004236:	4a21      	ldr	r2, [pc, #132]	; (80042bc <_malloc_r+0xac>)
 8004238:	6814      	ldr	r4, [r2, #0]
 800423a:	4621      	mov	r1, r4
 800423c:	b991      	cbnz	r1, 8004264 <_malloc_r+0x54>
 800423e:	4c20      	ldr	r4, [pc, #128]	; (80042c0 <_malloc_r+0xb0>)
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	b91b      	cbnz	r3, 800424c <_malloc_r+0x3c>
 8004244:	4630      	mov	r0, r6
 8004246:	f000 f863 	bl	8004310 <_sbrk_r>
 800424a:	6020      	str	r0, [r4, #0]
 800424c:	4629      	mov	r1, r5
 800424e:	4630      	mov	r0, r6
 8004250:	f000 f85e 	bl	8004310 <_sbrk_r>
 8004254:	1c43      	adds	r3, r0, #1
 8004256:	d124      	bne.n	80042a2 <_malloc_r+0x92>
 8004258:	230c      	movs	r3, #12
 800425a:	4630      	mov	r0, r6
 800425c:	6033      	str	r3, [r6, #0]
 800425e:	f000 f868 	bl	8004332 <__malloc_unlock>
 8004262:	e7e4      	b.n	800422e <_malloc_r+0x1e>
 8004264:	680b      	ldr	r3, [r1, #0]
 8004266:	1b5b      	subs	r3, r3, r5
 8004268:	d418      	bmi.n	800429c <_malloc_r+0x8c>
 800426a:	2b0b      	cmp	r3, #11
 800426c:	d90f      	bls.n	800428e <_malloc_r+0x7e>
 800426e:	600b      	str	r3, [r1, #0]
 8004270:	18cc      	adds	r4, r1, r3
 8004272:	50cd      	str	r5, [r1, r3]
 8004274:	4630      	mov	r0, r6
 8004276:	f000 f85c 	bl	8004332 <__malloc_unlock>
 800427a:	f104 000b 	add.w	r0, r4, #11
 800427e:	1d23      	adds	r3, r4, #4
 8004280:	f020 0007 	bic.w	r0, r0, #7
 8004284:	1ac3      	subs	r3, r0, r3
 8004286:	d0d3      	beq.n	8004230 <_malloc_r+0x20>
 8004288:	425a      	negs	r2, r3
 800428a:	50e2      	str	r2, [r4, r3]
 800428c:	e7d0      	b.n	8004230 <_malloc_r+0x20>
 800428e:	684b      	ldr	r3, [r1, #4]
 8004290:	428c      	cmp	r4, r1
 8004292:	bf16      	itet	ne
 8004294:	6063      	strne	r3, [r4, #4]
 8004296:	6013      	streq	r3, [r2, #0]
 8004298:	460c      	movne	r4, r1
 800429a:	e7eb      	b.n	8004274 <_malloc_r+0x64>
 800429c:	460c      	mov	r4, r1
 800429e:	6849      	ldr	r1, [r1, #4]
 80042a0:	e7cc      	b.n	800423c <_malloc_r+0x2c>
 80042a2:	1cc4      	adds	r4, r0, #3
 80042a4:	f024 0403 	bic.w	r4, r4, #3
 80042a8:	42a0      	cmp	r0, r4
 80042aa:	d005      	beq.n	80042b8 <_malloc_r+0xa8>
 80042ac:	1a21      	subs	r1, r4, r0
 80042ae:	4630      	mov	r0, r6
 80042b0:	f000 f82e 	bl	8004310 <_sbrk_r>
 80042b4:	3001      	adds	r0, #1
 80042b6:	d0cf      	beq.n	8004258 <_malloc_r+0x48>
 80042b8:	6025      	str	r5, [r4, #0]
 80042ba:	e7db      	b.n	8004274 <_malloc_r+0x64>
 80042bc:	2000009c 	.word	0x2000009c
 80042c0:	200000a0 	.word	0x200000a0

080042c4 <_realloc_r>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	4607      	mov	r7, r0
 80042c8:	4614      	mov	r4, r2
 80042ca:	460e      	mov	r6, r1
 80042cc:	b921      	cbnz	r1, 80042d8 <_realloc_r+0x14>
 80042ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042d2:	4611      	mov	r1, r2
 80042d4:	f7ff bf9c 	b.w	8004210 <_malloc_r>
 80042d8:	b922      	cbnz	r2, 80042e4 <_realloc_r+0x20>
 80042da:	f7ff ff4d 	bl	8004178 <_free_r>
 80042de:	4625      	mov	r5, r4
 80042e0:	4628      	mov	r0, r5
 80042e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e4:	f000 f826 	bl	8004334 <_malloc_usable_size_r>
 80042e8:	42a0      	cmp	r0, r4
 80042ea:	d20f      	bcs.n	800430c <_realloc_r+0x48>
 80042ec:	4621      	mov	r1, r4
 80042ee:	4638      	mov	r0, r7
 80042f0:	f7ff ff8e 	bl	8004210 <_malloc_r>
 80042f4:	4605      	mov	r5, r0
 80042f6:	2800      	cmp	r0, #0
 80042f8:	d0f2      	beq.n	80042e0 <_realloc_r+0x1c>
 80042fa:	4631      	mov	r1, r6
 80042fc:	4622      	mov	r2, r4
 80042fe:	f7ff ff17 	bl	8004130 <memcpy>
 8004302:	4631      	mov	r1, r6
 8004304:	4638      	mov	r0, r7
 8004306:	f7ff ff37 	bl	8004178 <_free_r>
 800430a:	e7e9      	b.n	80042e0 <_realloc_r+0x1c>
 800430c:	4635      	mov	r5, r6
 800430e:	e7e7      	b.n	80042e0 <_realloc_r+0x1c>

08004310 <_sbrk_r>:
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	2300      	movs	r3, #0
 8004314:	4c05      	ldr	r4, [pc, #20]	; (800432c <_sbrk_r+0x1c>)
 8004316:	4605      	mov	r5, r0
 8004318:	4608      	mov	r0, r1
 800431a:	6023      	str	r3, [r4, #0]
 800431c:	f7fd fad2 	bl	80018c4 <_sbrk>
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	d102      	bne.n	800432a <_sbrk_r+0x1a>
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	b103      	cbz	r3, 800432a <_sbrk_r+0x1a>
 8004328:	602b      	str	r3, [r5, #0]
 800432a:	bd38      	pop	{r3, r4, r5, pc}
 800432c:	20000154 	.word	0x20000154

08004330 <__malloc_lock>:
 8004330:	4770      	bx	lr

08004332 <__malloc_unlock>:
 8004332:	4770      	bx	lr

08004334 <_malloc_usable_size_r>:
 8004334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004338:	1f18      	subs	r0, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	bfbc      	itt	lt
 800433e:	580b      	ldrlt	r3, [r1, r0]
 8004340:	18c0      	addlt	r0, r0, r3
 8004342:	4770      	bx	lr

08004344 <_init>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	bf00      	nop
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr

08004350 <_fini>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	bf00      	nop
 8004354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004356:	bc08      	pop	{r3}
 8004358:	469e      	mov	lr, r3
 800435a:	4770      	bx	lr
