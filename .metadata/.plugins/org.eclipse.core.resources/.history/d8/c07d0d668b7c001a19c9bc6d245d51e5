/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart1;

/* USER CODE BEGI_tN PV */
static const uint8_t MPU6050_ADDR 		= 0xD0; //110100 << 2
static const uint8_t WHO_AM_I_REG 		= 0x75;
static const uint8_t PWR_MGMT_1_REG  	= 0x6B;
static const uint8_t SMPLRT_DIV_REG  	= 0x19;
static const uint8_t GYRO_CONFIG_REG 	= 0x1B;
static const uint8_t GYRO_XOUT_H_REG	= 0x43;
static const uint8_t ACCEL_CONFIG_REG	= 0x1C;
static const uint8_t ACCEL_XOUT_H_REG	= 0x3B;

int16_t Accel_X_RAW = 0;
int16_t Accel_Y_RAW = 0;
int16_t Accel_Z_RAW = 0;

int16_t Gyro_X_RAW = 0;
int16_t Gyro_Y_RAW = 0;
int16_t Gyro_Z_RAW = 0;

float Ax, Ay, Az, Gx, Gy, Gz;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void MPU_Init(void);
void MPU6050_Read_Accel(void);
void MPU6050_Read_Gyro(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	uint8_t buf[12];
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  MPU_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_Accel();
	  MPU6050_Read_Gyro();

	  Ax *= 100;
	  sprintf((char*)buf, "Ax= %u.%02u g\r\n", (unsigned int)Ax/100,(unsigned int)Ax%100);
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);

	  Ay *= 100;
	  sprintf((char*)buf, "Ay= %u.%02u g\r\n", (unsigned int)Ay/100,(unsigned int)Ay%100);
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);

	  Az *= 100;
	  sprintf((char*)buf, "Az= %u.%02u g\r\n", (unsigned int)Az/100,(unsigned int)Az%100);
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);

	  Gx *= 100;
	  sprintf((char*)buf, "Gx= %u.%02u deg/s\r\n", (unsigned int)Gx/100,(unsigned int)Gx%100);
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);

	  Gy *= 100;
	  sprintf((char*)buf, "Gy= %u.%02u deg/s\r\n", (unsigned int)Gy/100,(unsigned int)Gy%100);
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);

	  Gz *= 100;
	  sprintf((char*)buf, "Gz= %u.%02u deg/s\r\n", (unsigned int)Gz/100,(unsigned int)Gz%100);
	  HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);

	  HAL_Delay(75);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */

void MPU_Init(void)
{
	HAL_StatusTypeDef retStatus;
	uint8_t bufSerial[30];
	uint8_t bufData = 0;
	/* check if the sensor is responding */
	retStatus = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &bufData, 1, HAL_MAX_DELAY);
	if(bufData = 104) //0x68 - default value
	{
		strcpy((char*)bufSerial,"WHO_AM_I_REG OK\r\n");
		HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);

		/* POWER MANAGEMENT: all 0's to wake the sensor up */
		bufData = 0;
		retStatus = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&bufData, 1, HAL_MAX_DELAY);
		if(retStatus = HAL_OK)
		{
			strcpy((char*)bufSerial,"PWR_MGMT_1_REG OK\r\n");
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
		} else {
			strcpy((char*)bufSerial,"PWR_MGMT_1_REG ERROR\r\n");
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
		}

		/* SAMPLE RATE = Gyroscope Output Rate / (1 + SMPLRT_DIV) // Gyroscope Output Rate = 8kHz */
		bufData = 0x07;
		retStatus = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &bufData, 1, HAL_MAX_DELAY);
		if(retStatus = HAL_OK)
		{
			strcpy((char*)bufSerial,"SMPLRT_DIV_REG OK\r\n");
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
		} else {
			strcpy((char*)bufSerial,"SMPLRT_DIV_REG ERROR\r\n");
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
		}

		/* GYROSCOPE CONFIGURATION: full scale range (250 to 2000 degree/sec) */
		bufData = 0x00;
		retStatus = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &bufData, 1, HAL_MAX_DELAY);
		if(retStatus = HAL_OK)
		{
			strcpy((char*)bufSerial,"GYRO_CONFIG_REG OK\r\n");
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
		} else {
			strcpy((char*)bufSerial,"GYRO_CONFIG_REG ERROR\r\n");
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
		}

		/* ACCELEROMETER CONFIGURATION: full scale range (2 to 16 g) */
		bufData = 0x00;
		retStatus = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &bufData, 1, HAL_MAX_DELAY);
		if(retStatus = HAL_OK)
		{
			strcpy((char*)bufSerial,"ACCEL_CONFIG_REG OK\r\n");
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
		} else {
			strcpy((char*)bufSerial,"ACCEL_CONFIG_REG ERROR\r\n");
			HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
		}
	} else	{
		strcpy((char*)bufSerial,"WHO_AM_I_REG ERROR\r\n");
		HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
	}
}

void MPU6050_Read_Accel(void)
{
	HAL_StatusTypeDef retStatus;
	uint8_t bufSerial[30];
	uint8_t bufData[6];
	retStatus = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, &bufData, 6, HAL_MAX_DELAY);
	if(retStatus = HAL_OK)
	{
		Accel_X_RAW = (int16_t)(bufData[0] << 8 | bufData [1]);
		Accel_Y_RAW = (int16_t)(bufData[2] << 8 | bufData [3]);
		Accel_Z_RAW = (int16_t)(bufData[4] << 8 | bufData [5]);
		Ax = Accel_X_RAW/16384.0;
		Ay = Accel_Y_RAW/16384.0;
		Az = Accel_Z_RAW/16384.0;
	} else {
		strcpy((char*)bufSerial,"ACCEL_XOUT_H_REG ERROR\r\n");
		HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
	}
}

void MPU6050_Read_Gyro(void)
{
	HAL_StatusTypeDef retStatus;
	uint8_t bufSerial[30];
	uint8_t bufData[6];
	retStatus = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, &bufData, 6, HAL_MAX_DELAY);
	if(retStatus = HAL_OK)
	{
		Gyro_X_RAW = (int16_t)(bufData[0] << 8 | bufData [1]);
		Gyro_Y_RAW = (int16_t)(bufData[2] << 8 | bufData [3]);
		Gyro_Z_RAW = (int16_t)(bufData[4] << 8 | bufData [5]);
		Gx = Gyro_X_RAW/131.0;
		Gy = Gyro_Y_RAW/131.0;
		Gz = Gyro_Z_RAW/131.0;
	} else {
		strcpy((char*)bufSerial,"GYRO_XOUT_H_REG ERROR\r\n");
		HAL_UART_Transmit(&huart1, bufSerial, strlen((char*)bufSerial), HAL_MAX_DELAY);
	}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
